// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"

	"github.com/NSObjects/echo-admin/internal/api/data/model"

	"time"
)

func newUser(db *gorm.DB, opts ...gen.DOOption) user {
	_user := user{}

	_user.userDo.UseDB(db, opts...)
	_user.userDo.UseModel(&model.User{})

	tableName := _user.userDo.TableName()
	_user.ALL = field.NewAsterisk(tableName)
	_user.ID = field.NewInt64(tableName, "id")
	_user.Username = field.NewString(tableName, "username")
	_user.Email = field.NewString(tableName, "email")
	_user.Mobile = field.NewString(tableName, "mobile")
	_user.Password = field.NewString(tableName, "password")
	_user.Gender = field.NewInt32(tableName, "gender")
	_user.Age = field.NewInt32(tableName, "age")
	_user.Status = field.NewInt32(tableName, "status")
	_user.CreatedAt = field.NewTime(tableName, "created_at")
	_user.UpdatedAt = field.NewTime(tableName, "updated_at")
	_user.LastLogin = field.NewTime(tableName, "last_login")
	_user.Bio = field.NewString(tableName, "bio")

	_user.fillFieldMap()

	return _user
}

type user struct {
	userDo

	ALL       field.Asterisk
	ID        field.Int64
	Username  field.String
	Email     field.String
	Mobile    field.String
	Password  field.String
	Gender    field.Int32
	Age       field.Int32
	Status    field.Int32
	CreatedAt field.Time
	UpdatedAt field.Time
	LastLogin field.Time
	Bio       field.String

	fieldMap map[string]field.Expr
}

func (u user) Table(newTableName string) *user {
	u.userDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u user) As(alias string) *user {
	u.userDo.DO = *(u.userDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *user) updateTableName(table string) *user {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.Username = field.NewString(table, "username")
	u.Email = field.NewString(table, "email")
	u.Mobile = field.NewString(table, "mobile")
	u.Password = field.NewString(table, "password")
	u.Gender = field.NewInt32(table, "gender")
	u.Age = field.NewInt32(table, "age")
	u.Status = field.NewInt32(table, "status")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UpdatedAt = field.NewTime(table, "updated_at")
	u.LastLogin = field.NewTime(table, "last_login")
	u.Bio = field.NewString(table, "bio")

	u.fillFieldMap()

	return u
}

func (u *user) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *user) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 12)
	u.fieldMap["id"] = u.ID
	u.fieldMap["username"] = u.Username
	u.fieldMap["email"] = u.Email
	u.fieldMap["mobile"] = u.Mobile
	u.fieldMap["password"] = u.Password
	u.fieldMap["gender"] = u.Gender
	u.fieldMap["age"] = u.Age
	u.fieldMap["status"] = u.Status
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["last_login"] = u.LastLogin
	u.fieldMap["bio"] = u.Bio
}

func (u user) clone(db *gorm.DB) user {
	u.userDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u user) replaceDB(db *gorm.DB) user {
	u.userDo.ReplaceDB(db)
	return u
}

type userDo struct{ gen.DO }

type IUserDo interface {
	gen.SubQuery
	Debug() IUserDo
	WithContext(ctx context.Context) IUserDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserDo
	WriteDB() IUserDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserDo
	Not(conds ...gen.Condition) IUserDo
	Or(conds ...gen.Condition) IUserDo
	Select(conds ...field.Expr) IUserDo
	Where(conds ...gen.Condition) IUserDo
	Order(conds ...field.Expr) IUserDo
	Distinct(cols ...field.Expr) IUserDo
	Omit(cols ...field.Expr) IUserDo
	Join(table schema.Tabler, on ...field.Expr) IUserDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserDo
	Group(cols ...field.Expr) IUserDo
	Having(conds ...gen.Condition) IUserDo
	Limit(limit int) IUserDo
	Offset(offset int) IUserDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserDo
	Unscoped() IUserDo
	Create(values ...*model.User) error
	CreateInBatches(values []*model.User, batchSize int) error
	Save(values ...*model.User) error
	First() (*model.User, error)
	Take() (*model.User, error)
	Last() (*model.User, error)
	Find() ([]*model.User, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.User, err error)
	FindInBatches(result *[]*model.User, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.User) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserDo
	Assign(attrs ...field.AssignExpr) IUserDo
	Joins(fields ...field.RelationField) IUserDo
	Preload(fields ...field.RelationField) IUserDo
	FirstOrInit() (*model.User, error)
	FirstOrCreate() (*model.User, error)
	FindByPage(offset int, limit int) (result []*model.User, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetByID(id uint) (result model.User, err error)
	GetByIDs(ids []uint) (result []model.User, err error)
	CountRecords() (result int64, err error)
	Exists(id uint) (result bool, err error)
	DeleteByID(id uint) (err error)
	DeleteByIDs(ids []uint) (err error)
	GetPage(offset int, limit int, orderBy string) (result []model.User, err error)
	GetPageWithCondition(condition string, offset int, limit int, orderBy string) (result []model.User, err error)
	Search(field string, keyword string) (result []model.User, err error)
	SearchMultiple(field1 string, field2 string, keyword string) (result []model.User, err error)
	GetByStatus(status int) (result []model.User, err error)
	UpdateStatus(id uint, status int) (err error)
	GetActive() (result []model.User, err error)
	GetInactive() (result []model.User, err error)
	FilterWithCondition(condition string) (result []model.User, err error)
	FilterWithTime(start time.Time, end time.Time) (result []model.User, err error)
	UpdateWithSet(name string, age int, id uint) (err error)
	GetByField(field string, value string) (result model.User, err error)
	GetByFields(field1 string, value1 string, field2 string, value2 string) (result []model.User, err error)
	BatchUpdate(field string, value string, ids []uint) (err error)
}

// GetByID
// SELECT * FROM @@table WHERE id = @id
func (u userDo) GetByID(id uint) (result model.User, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM users WHERE id = ? ")

	var executeSQL *gorm.DB
	executeSQL = u.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// GetByIDs
// SELECT * FROM @@table WHERE id IN @ids
func (u userDo) GetByIDs(ids []uint) (result []model.User, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, ids)
	generateSQL.WriteString("SELECT * FROM users WHERE id IN ? ")

	var executeSQL *gorm.DB
	executeSQL = u.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// CountRecords
// SELECT COUNT(*) FROM @@table
func (u userDo) CountRecords() (result int64, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT COUNT(*) FROM users ")

	var executeSQL *gorm.DB
	executeSQL = u.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Exists
// SELECT 1 FROM @@table WHERE id = @id LIMIT 1
func (u userDo) Exists(id uint) (result bool, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT 1 FROM users WHERE id = ? LIMIT 1 ")

	var executeSQL *gorm.DB
	executeSQL = u.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DeleteByID
// DELETE FROM @@table WHERE id = @id
func (u userDo) DeleteByID(id uint) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("DELETE FROM users WHERE id = ? ")

	var executeSQL *gorm.DB
	executeSQL = u.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DeleteByIDs
// DELETE FROM @@table WHERE id IN @ids
func (u userDo) DeleteByIDs(ids []uint) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, ids)
	generateSQL.WriteString("DELETE FROM users WHERE id IN ? ")

	var executeSQL *gorm.DB
	executeSQL = u.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// GetPage
// SELECT * FROM @@table ORDER BY @orderBy LIMIT @limit OFFSET @offset
func (u userDo) GetPage(offset int, limit int, orderBy string) (result []model.User, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, orderBy)
	params = append(params, limit)
	params = append(params, offset)
	generateSQL.WriteString("SELECT * FROM users ORDER BY ? LIMIT ? OFFSET ? ")

	var executeSQL *gorm.DB
	executeSQL = u.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// GetPageWithCondition
// SELECT * FROM @@table WHERE @condition ORDER BY @orderBy LIMIT @limit OFFSET @offset
func (u userDo) GetPageWithCondition(condition string, offset int, limit int, orderBy string) (result []model.User, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, condition)
	params = append(params, orderBy)
	params = append(params, limit)
	params = append(params, offset)
	generateSQL.WriteString("SELECT * FROM users WHERE ? ORDER BY ? LIMIT ? OFFSET ? ")

	var executeSQL *gorm.DB
	executeSQL = u.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Search
// SELECT * FROM @@table WHERE @field LIKE @keyword
func (u userDo) Search(field string, keyword string) (result []model.User, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, field)
	params = append(params, keyword)
	generateSQL.WriteString("SELECT * FROM users WHERE ? LIKE ? ")

	var executeSQL *gorm.DB
	executeSQL = u.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SearchMultiple
// SELECT * FROM @@table WHERE @field1 LIKE @keyword OR @field2 LIKE @keyword
func (u userDo) SearchMultiple(field1 string, field2 string, keyword string) (result []model.User, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, field1)
	params = append(params, keyword)
	params = append(params, field2)
	params = append(params, keyword)
	generateSQL.WriteString("SELECT * FROM users WHERE ? LIKE ? OR ? LIKE ? ")

	var executeSQL *gorm.DB
	executeSQL = u.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// GetByStatus
// SELECT * FROM @@table WHERE status = @status
func (u userDo) GetByStatus(status int) (result []model.User, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, status)
	generateSQL.WriteString("SELECT * FROM users WHERE status = ? ")

	var executeSQL *gorm.DB
	executeSQL = u.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UpdateStatus
// UPDATE @@table SET status = @status WHERE id = @id
func (u userDo) UpdateStatus(id uint, status int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, status)
	params = append(params, id)
	generateSQL.WriteString("UPDATE users SET status = ? WHERE id = ? ")

	var executeSQL *gorm.DB
	executeSQL = u.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// GetActive
// SELECT * FROM @@table WHERE status = 1
func (u userDo) GetActive() (result []model.User, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM users WHERE status = 1 ")

	var executeSQL *gorm.DB
	executeSQL = u.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// GetInactive
// SELECT * FROM @@table WHERE status = 0
func (u userDo) GetInactive() (result []model.User, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM users WHERE status = 0 ")

	var executeSQL *gorm.DB
	executeSQL = u.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// FilterWithCondition - 使用where模板表达式
// SELECT * FROM @@table
// {{where}}
//
//	{{if condition != ""}}
//	  @condition
//	{{end}}
//
// {{end}}
func (u userDo) FilterWithCondition(condition string) (result []model.User, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("- 使用where模板表达式 SELECT * FROM users ")
	var whereSQL0 strings.Builder
	if condition != "" {
		params = append(params, condition)
		whereSQL0.WriteString("? ")
	}
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = u.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// FilterWithTime - 使用if/else模板表达式
// SELECT * FROM @@table
// {{if !start.IsZero()}}
//
//	WHERE created_at > @start
//
// {{end}}
// {{if !end.IsZero()}}
//
//	AND created_at < @end
//
// {{end}}
func (u userDo) FilterWithTime(start time.Time, end time.Time) (result []model.User, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("- 使用if/else模板表达式 SELECT * FROM users ")
	if !start.IsZero() {
		params = append(params, start)
		generateSQL.WriteString("WHERE created_at > ? ")
	}
	if !end.IsZero() {
		params = append(params, end)
		generateSQL.WriteString("AND created_at < ? ")
	}

	var executeSQL *gorm.DB
	executeSQL = u.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UpdateWithSet - 使用set模板表达式
// UPDATE @@table
// {{set}}
//
//	{{if name != ""}} name=@name, {{end}}
//	{{if age > 0}} age=@age, {{end}}
//	updated_at=NOW()
//
// {{end}}
// WHERE id=@id
func (u userDo) UpdateWithSet(name string, age int, id uint) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("- 使用set模板表达式 UPDATE users ")
	var setSQL0 strings.Builder
	if name != "" {
		params = append(params, name)
		setSQL0.WriteString("name=?, ")
	}
	if age > 0 {
		params = append(params, age)
		setSQL0.WriteString("age=?, ")
	}
	setSQL0.WriteString("updated_at=NOW() ")
	helper.JoinSetBuilder(&generateSQL, setSQL0)
	params = append(params, id)
	generateSQL.WriteString("WHERE id=? ")

	var executeSQL *gorm.DB
	executeSQL = u.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// GetByField - 通用字段查询
// SELECT * FROM @@table WHERE @@field = @value
func (u userDo) GetByField(field string, value string) (result model.User, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, value)
	generateSQL.WriteString("- 通用字段查询 SELECT * FROM users WHERE " + u.Quote(field) + " = ? ")

	var executeSQL *gorm.DB
	executeSQL = u.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// GetByFields - 多字段查询
// SELECT * FROM @@table WHERE @@field1 = @value1 AND @@field2 = @value2
func (u userDo) GetByFields(field1 string, value1 string, field2 string, value2 string) (result []model.User, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, value1)
	params = append(params, value2)
	generateSQL.WriteString("- 多字段查询 SELECT * FROM users WHERE " + u.Quote(field1) + " = ? AND " + u.Quote(field2) + " = ? ")

	var executeSQL *gorm.DB
	executeSQL = u.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// BatchUpdate - 批量更新
// UPDATE @@table SET @@field = @value WHERE id IN @ids
func (u userDo) BatchUpdate(field string, value string, ids []uint) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, value)
	params = append(params, ids)
	generateSQL.WriteString("- 批量更新 UPDATE users SET " + u.Quote(field) + " = ? WHERE id IN ? ")

	var executeSQL *gorm.DB
	executeSQL = u.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (u userDo) Debug() IUserDo {
	return u.withDO(u.DO.Debug())
}

func (u userDo) WithContext(ctx context.Context) IUserDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userDo) ReadDB() IUserDo {
	return u.Clauses(dbresolver.Read)
}

func (u userDo) WriteDB() IUserDo {
	return u.Clauses(dbresolver.Write)
}

func (u userDo) Session(config *gorm.Session) IUserDo {
	return u.withDO(u.DO.Session(config))
}

func (u userDo) Clauses(conds ...clause.Expression) IUserDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userDo) Returning(value interface{}, columns ...string) IUserDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userDo) Not(conds ...gen.Condition) IUserDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userDo) Or(conds ...gen.Condition) IUserDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userDo) Select(conds ...field.Expr) IUserDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userDo) Where(conds ...gen.Condition) IUserDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userDo) Order(conds ...field.Expr) IUserDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userDo) Distinct(cols ...field.Expr) IUserDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userDo) Omit(cols ...field.Expr) IUserDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userDo) Join(table schema.Tabler, on ...field.Expr) IUserDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userDo) Group(cols ...field.Expr) IUserDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userDo) Having(conds ...gen.Condition) IUserDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userDo) Limit(limit int) IUserDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userDo) Offset(offset int) IUserDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userDo) Unscoped() IUserDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userDo) Create(values ...*model.User) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userDo) CreateInBatches(values []*model.User, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userDo) Save(values ...*model.User) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userDo) First() (*model.User, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.User), nil
	}
}

func (u userDo) Take() (*model.User, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.User), nil
	}
}

func (u userDo) Last() (*model.User, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.User), nil
	}
}

func (u userDo) Find() ([]*model.User, error) {
	result, err := u.DO.Find()
	return result.([]*model.User), err
}

func (u userDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.User, err error) {
	buf := make([]*model.User, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userDo) FindInBatches(result *[]*model.User, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userDo) Attrs(attrs ...field.AssignExpr) IUserDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userDo) Assign(attrs ...field.AssignExpr) IUserDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userDo) Joins(fields ...field.RelationField) IUserDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userDo) Preload(fields ...field.RelationField) IUserDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userDo) FirstOrInit() (*model.User, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.User), nil
	}
}

func (u userDo) FirstOrCreate() (*model.User, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.User), nil
	}
}

func (u userDo) FindByPage(offset int, limit int) (result []*model.User, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userDo) Delete(models ...*model.User) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userDo) withDO(do gen.Dao) *userDo {
	u.DO = *do.(*gen.DO)
	return u
}
