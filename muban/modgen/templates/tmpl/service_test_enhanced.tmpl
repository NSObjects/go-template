/*
 * Generated enhanced test cases from OpenAPI3 document
 * Module: {{.Pascal}}
 * Features: Table-driven tests with comprehensive coverage
 */

package service

import (
	{{if .Operations}}"bytes"
	"context"
	"encoding/json"
	"net/http"
	"net/http/httptest"
	"testing"

	"{{.PackagePath}}/internal/api/service/param"
	"{{.PackagePath}}/internal/resp"
	"github.com/labstack/echo/v4"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"{{end}}
)

{{if .Operations}}
// Mock{{.Pascal}}UseCase 模拟业务逻辑接口
type Mock{{.Pascal}}UseCase struct {
	mock.Mock
}

{{range .Operations}}
{{if or (eq .MethodName "Create") (hasPrefix .MethodName "Create") (eq .MethodName "createUser") (hasPrefix .MethodName "create")}}
{{if and .ResponseData (eq .ResponseData.GoType "Data")}}func (m *Mock{{$.Pascal}}UseCase) {{.MethodName}}(ctx context.Context{{if .HasPathParams}}, id int64{{end}}{{if .HasRequestBodyOrQuery}}, req param.{{$.Pascal}}{{.MethodName}}Request{{end}}) (*param.{{$.Pascal}}Data, error) {
	{{if and .HasRequestBodyOrQuery .HasPathParams}}args := m.Called(ctx, id, req){{else if .HasRequestBodyOrQuery}}args := m.Called(ctx, req){{else if .HasPathParams}}args := m.Called(ctx, id){{else}}args := m.Called(ctx){{end}}
	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*param.{{$.Pascal}}Data), args.Error(1)
}
{{else}}func (m *Mock{{$.Pascal}}UseCase) {{.MethodName}}(ctx context.Context{{if .HasPathParams}}, id int64{{end}}{{if .HasRequestBodyOrQuery}}, req param.{{$.Pascal}}{{.MethodName}}Request{{end}}) error {
	{{if and .HasRequestBodyOrQuery .HasPathParams}}args := m.Called(ctx, id, req){{else if .HasRequestBodyOrQuery}}args := m.Called(ctx, req){{else if .HasPathParams}}args := m.Called(ctx, id){{else}}args := m.Called(ctx){{end}}
	return args.Error(0)
}
{{end}}
{{else if hasPrefix .MethodName "List"}}
func (m *Mock{{$.Pascal}}UseCase) {{.MethodName}}(ctx context.Context{{if .HasRequestBodyOrQuery}}, req param.{{$.Pascal}}{{.MethodName}}Request{{end}}) ([]param.{{$.Pascal}}ListItem, int64, error) {
	{{if .HasRequestBodyOrQuery}}args := m.Called(ctx, req){{else}}args := m.Called(ctx){{end}}
	return args.Get(0).([]param.{{$.Pascal}}ListItem), args.Get(1).(int64), args.Error(2)
}
{{else if or (eq .MethodName "GetByID") (hasPrefix .MethodName "Get")}}
func (m *Mock{{$.Pascal}}UseCase) {{.MethodName}}(ctx context.Context, id int64) (*param.{{$.Pascal}}Data, error) {
	args := m.Called(ctx, id)
	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*param.{{$.Pascal}}Data), args.Error(1)
}
{{else if or (eq .MethodName "Update") (hasPrefix .MethodName "Update")}}
{{if and .ResponseData (eq .ResponseData.GoType "Data")}}func (m *Mock{{$.Pascal}}UseCase) {{.MethodName}}(ctx context.Context, id int64, req param.{{$.Pascal}}{{.MethodName}}Request) (*param.{{$.Pascal}}Data, error) {
	args := m.Called(ctx, id, req)
	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*param.{{$.Pascal}}Data), args.Error(1)
}
{{else}}func (m *Mock{{$.Pascal}}UseCase) {{.MethodName}}(ctx context.Context, id int64, req param.{{$.Pascal}}{{.MethodName}}Request) error {
	args := m.Called(ctx, id, req)
	return args.Error(0)
}
{{end}}
{{else if or (eq .MethodName "Delete") (hasPrefix .MethodName "Delete")}}
{{if and .ResponseData (eq .ResponseData.GoType "Data")}}func (m *Mock{{$.Pascal}}UseCase) {{.MethodName}}(ctx context.Context, id int64) (*param.{{$.Pascal}}Data, error) {
	args := m.Called(ctx, id)
	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*param.{{$.Pascal}}Data), args.Error(1)
}
{{else}}func (m *Mock{{$.Pascal}}UseCase) {{.MethodName}}(ctx context.Context, id int64) error {
	args := m.Called(ctx, id)
	return args.Error(0)
}
{{end}}
{{else}}
{{if and .ResponseData (eq .ResponseData.GoType "Data")}}func (m *Mock{{$.Pascal}}UseCase) {{.MethodName}}(ctx context.Context{{if .HasPathParams}}, id int64{{end}}{{if .HasRequestBodyOrQuery}}, req param.{{$.Pascal}}{{.MethodName}}Request{{end}}) (*param.{{$.Pascal}}Data, error) {
	{{if and .HasRequestBodyOrQuery .HasPathParams}}args := m.Called(ctx, id, req){{else if .HasRequestBodyOrQuery}}args := m.Called(ctx, req){{else if .HasPathParams}}args := m.Called(ctx, id){{else}}args := m.Called(ctx){{end}}
	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*param.{{$.Pascal}}Data), args.Error(1)
}
{{else if and .ResponseData (eq .ResponseData.GoType "ListItem")}}func (m *Mock{{$.Pascal}}UseCase) {{.MethodName}}(ctx context.Context{{if .HasPathParams}}, id int64{{end}}{{if .HasRequestBodyOrQuery}}, req param.{{$.Pascal}}{{.MethodName}}Request{{end}}) ([]param.{{$.Pascal}}ListItem, int64, error) {
	{{if and .HasRequestBodyOrQuery .HasPathParams}}args := m.Called(ctx, id, req){{else if .HasRequestBodyOrQuery}}args := m.Called(ctx, req){{else if .HasPathParams}}args := m.Called(ctx, id){{else}}args := m.Called(ctx){{end}}
	return args.Get(0).([]param.{{$.Pascal}}ListItem), args.Get(1).(int64), args.Error(2)
}
{{else}}func (m *Mock{{$.Pascal}}UseCase) {{.MethodName}}(ctx context.Context{{if .HasPathParams}}, id int64{{end}}{{if .HasRequestBodyOrQuery}}, req param.{{$.Pascal}}{{.MethodName}}Request{{end}}) error {
	{{if and .HasRequestBodyOrQuery .HasPathParams}}args := m.Called(ctx, id, req){{else if .HasRequestBodyOrQuery}}args := m.Called(ctx, req){{else if .HasPathParams}}args := m.Called(ctx, id){{else}}args := m.Called(ctx){{end}}
	return args.Error(0)
}
{{end}}
{{end}}
{{end}}

{{range .Operations}}
func Test{{$.Pascal}}Controller_{{.MethodName}}(t *testing.T) {
	tests := []struct {
		name           string
		setupMock      func(*Mock{{$.Pascal}}UseCase)
		setupRequest   func() (*http.Request, echo.Context)
		expectedStatus int
		expectedError  bool
		validateResponse func(t *testing.T, status int, body string)
	}{
		{
			name: "成功场景",
			setupMock: func(m *Mock{{$.Pascal}}UseCase) {
				{{if or (eq .MethodName "Create") (hasPrefix .MethodName "Create") (eq .MethodName "createUser") (hasPrefix .MethodName "create")}}
				{{if and .ResponseData (eq .ResponseData.GoType "Data")}}{{if and .HasRequestBodyOrQuery .HasPathParams}}m.On("{{.MethodName}}", mock.Anything, mock.Anything, mock.Anything).Return(&param.{{$.Pascal}}Data{Id: 1}, nil){{else if .HasRequestBodyOrQuery}}m.On("{{.MethodName}}", mock.Anything, mock.Anything).Return(&param.{{$.Pascal}}Data{Id: 1}, nil){{else if .HasPathParams}}m.On("{{.MethodName}}", mock.Anything, mock.Anything).Return(&param.{{$.Pascal}}Data{Id: 1}, nil){{else}}m.On("{{.MethodName}}", mock.Anything).Return(&param.{{$.Pascal}}Data{Id: 1}, nil){{end}}
				{{else}}{{if and .HasRequestBodyOrQuery .HasPathParams}}m.On("{{.MethodName}}", mock.Anything, mock.Anything, mock.Anything).Return(nil){{else if .HasRequestBodyOrQuery}}m.On("{{.MethodName}}", mock.Anything, mock.Anything).Return(nil){{else if .HasPathParams}}m.On("{{.MethodName}}", mock.Anything, mock.Anything).Return(nil){{else}}m.On("{{.MethodName}}", mock.Anything).Return(nil){{end}}
				{{end}}
				{{else if hasPrefix .MethodName "List"}}
				{{if .HasRequestBodyOrQuery}}m.On("{{.MethodName}}", mock.Anything, mock.Anything).Return([]param.{{$.Pascal}}ListItem{
					{
						Id:        1,
						Username:  "test",
						Email:     "test@example.com",
						{{if $.HasTimeFields}}CreatedAt: time.Now(),
						UpdatedAt: time.Now(),{{end}}
						Age:       18,
					},
				}, int64(1), nil){{else}}m.On("{{.MethodName}}", mock.Anything).Return([]param.{{$.Pascal}}ListItem{
					{
						Id:        1,
						Username:  "test",
						Email:     "test@example.com",
						{{if $.HasTimeFields}}CreatedAt: time.Now(),
						UpdatedAt: time.Now(),{{end}}
						Age:       18,
					},
				}, int64(1), nil){{end}}
				{{else if or (eq .MethodName "GetByID") (hasPrefix .MethodName "Get")}}
				m.On("{{.MethodName}}", mock.Anything, mock.Anything).Return(&param.{{$.Pascal}}Data{Id: 1}, nil)
				{{else if or (eq .MethodName "Update") (hasPrefix .MethodName "Update")}}
				{{if and .ResponseData (eq .ResponseData.GoType "Data")}}m.On("{{.MethodName}}", mock.Anything, mock.Anything, mock.Anything).Return(&param.{{$.Pascal}}Data{Id: 1}, nil){{else}}m.On("{{.MethodName}}", mock.Anything, mock.Anything, mock.Anything).Return(nil){{end}}
				{{else if or (eq .MethodName "Delete") (hasPrefix .MethodName "Delete")}}
				{{if and .ResponseData (eq .ResponseData.GoType "Data")}}m.On("{{.MethodName}}", mock.Anything, mock.Anything).Return(&param.{{$.Pascal}}Data{Id: 1}, nil){{else}}m.On("{{.MethodName}}", mock.Anything, mock.Anything).Return(nil){{end}}
				{{else}}
				{{if and .ResponseData (eq .ResponseData.GoType "Data")}}{{if and .HasRequestBodyOrQuery .HasPathParams}}m.On("{{.MethodName}}", mock.Anything, mock.Anything, mock.Anything).Return(&param.{{$.Pascal}}Data{Id: 1}, nil){{else if .HasRequestBodyOrQuery}}m.On("{{.MethodName}}", mock.Anything, mock.Anything).Return(&param.{{$.Pascal}}Data{Id: 1}, nil){{else if .HasPathParams}}m.On("{{.MethodName}}", mock.Anything, mock.Anything).Return(&param.{{$.Pascal}}Data{Id: 1}, nil){{else}}m.On("{{.MethodName}}", mock.Anything).Return(&param.{{$.Pascal}}Data{Id: 1}, nil){{end}}
				{{else if and .ResponseData (eq .ResponseData.GoType "ListItem")}}{{if and .HasRequestBodyOrQuery .HasPathParams}}m.On("{{.MethodName}}", mock.Anything, mock.Anything, mock.Anything).Return([]param.{{$.Pascal}}ListItem{
					{
						Id:        1,
						Username:  "test",
						Email:     "test@example.com",
						{{if $.HasTimeFields}}CreatedAt: time.Now(),
						UpdatedAt: time.Now(),{{end}}
						Age:       18,
					},
				}, int64(1), nil){{else if .HasRequestBodyOrQuery}}m.On("{{.MethodName}}", mock.Anything, mock.Anything).Return([]param.{{$.Pascal}}ListItem{
					{
						Id:        1,
						Username:  "test",
						Email:     "test@example.com",
						{{if $.HasTimeFields}}CreatedAt: time.Now(),
						UpdatedAt: time.Now(),{{end}}
						Age:       18,
					},
				}, int64(1), nil){{else if .HasPathParams}}m.On("{{.MethodName}}", mock.Anything, mock.Anything).Return([]param.{{$.Pascal}}ListItem{
					{
						Id:        1,
						Username:  "test",
						Email:     "test@example.com",
						{{if $.HasTimeFields}}CreatedAt: time.Now(),
						UpdatedAt: time.Now(),{{end}}
						Age:       18,
					},
				}, int64(1), nil){{else}}m.On("{{.MethodName}}", mock.Anything).Return([]param.{{$.Pascal}}ListItem{
					{
						Id:        1,
						Username:  "test",
						Email:     "test@example.com",
						{{if $.HasTimeFields}}CreatedAt: time.Now(),
						UpdatedAt: time.Now(),{{end}}
						Age:       18,
					},
				}, int64(1), nil){{end}}
				{{else}}{{if and .HasRequestBodyOrQuery .HasPathParams}}m.On("{{.MethodName}}", mock.Anything, mock.Anything, mock.Anything).Return(nil){{else if .HasRequestBodyOrQuery}}m.On("{{.MethodName}}", mock.Anything, mock.Anything).Return(nil){{else if .HasPathParams}}m.On("{{.MethodName}}", mock.Anything, mock.Anything).Return(nil){{else}}m.On("{{.MethodName}}", mock.Anything).Return(nil){{end}}
				{{end}}
				{{end}}
			},
			setupRequest: func() (*http.Request, echo.Context) {
				e := echo.New()
				{{if .HasRequestBodyOrQuery}}
				reqBody := `{{if .RequestBody}}{"username":"testuser","email":"test@example.com"}{{else}}{"page":1,"size":10}{{end}}`
				req := httptest.NewRequest(http.Method{{if eq .Method "GET"}}Get{{else if eq .Method "POST"}}Post{{else if eq .Method "PUT"}}Put{{else if eq .Method "DELETE"}}Delete{{else if eq .Method "PATCH"}}Patch{{else}}{{.Method}}{{end}}, "/{{$.Camel}}", bytes.NewBufferString(reqBody))
				{{else}}
				req := httptest.NewRequest(http.Method{{if eq .Method "GET"}}Get{{else if eq .Method "POST"}}Post{{else if eq .Method "PUT"}}Put{{else if eq .Method "DELETE"}}Delete{{else if eq .Method "PATCH"}}Patch{{else}}{{.Method}}{{end}}, "/{{$.Camel}}", nil)
				{{end}}
				req.Header.Set(echo.HeaderContentType, echo.MIMEApplicationJSON)
				rec := httptest.NewRecorder()
				c := e.NewContext(req, rec)
				{{if .HasPathParams}}
				c.SetPath("/{{$.Camel}}/:id")
				c.SetParamNames("id")
				c.SetParamValues("1")
				{{end}}
				return req, c
			},
			expectedStatus: http.StatusOK,
			expectedError:  false,
			validateResponse: func(t *testing.T, status int, body string) {
				assert.Equal(t, http.StatusOK, status)
				var response resp.DataResponse
				err := json.Unmarshal([]byte(body), &response)
				assert.NoError(t, err)
				assert.Equal(t, 200, response.Code)
				assert.Equal(t, "success", response.Msg)
			},
		},
		{
			name: "业务逻辑错误",
			setupMock: func(m *Mock{{$.Pascal}}UseCase) {
				{{if or (eq .MethodName "Create") (hasPrefix .MethodName "Create") (eq .MethodName "createUser") (hasPrefix .MethodName "create")}}
				{{if and .ResponseData (eq .ResponseData.GoType "Data")}}{{if and .HasRequestBodyOrQuery .HasPathParams}}m.On("{{.MethodName}}", mock.Anything, mock.Anything, mock.Anything).Return(nil, assert.AnError){{else if .HasRequestBodyOrQuery}}m.On("{{.MethodName}}", mock.Anything, mock.Anything).Return(nil, assert.AnError){{else if .HasPathParams}}m.On("{{.MethodName}}", mock.Anything, mock.Anything).Return(nil, assert.AnError){{else}}m.On("{{.MethodName}}", mock.Anything).Return(nil, assert.AnError){{end}}
				{{else}}{{if and .HasRequestBodyOrQuery .HasPathParams}}m.On("{{.MethodName}}", mock.Anything, mock.Anything, mock.Anything).Return(assert.AnError){{else if .HasRequestBodyOrQuery}}m.On("{{.MethodName}}", mock.Anything, mock.Anything).Return(assert.AnError){{else if .HasPathParams}}m.On("{{.MethodName}}", mock.Anything, mock.Anything).Return(assert.AnError){{else}}m.On("{{.MethodName}}", mock.Anything).Return(assert.AnError){{end}}
				{{end}}
				{{else if hasPrefix .MethodName "List"}}
				{{if .HasRequestBodyOrQuery}}m.On("{{.MethodName}}", mock.Anything, mock.Anything).Return([]param.{{$.Pascal}}ListItem{}, int64(0), assert.AnError){{else}}m.On("{{.MethodName}}", mock.Anything).Return([]param.{{$.Pascal}}ListItem{}, int64(0), assert.AnError){{end}}
				{{else if or (eq .MethodName "GetByID") (hasPrefix .MethodName "Get")}}
				m.On("{{.MethodName}}", mock.Anything, mock.Anything).Return(nil, assert.AnError)
				{{else if or (eq .MethodName "Update") (hasPrefix .MethodName "Update")}}
				{{if and .ResponseData (eq .ResponseData.GoType "Data")}}m.On("{{.MethodName}}", mock.Anything, mock.Anything, mock.Anything).Return(nil, assert.AnError){{else}}m.On("{{.MethodName}}", mock.Anything, mock.Anything, mock.Anything).Return(assert.AnError){{end}}
				{{else if or (eq .MethodName "Delete") (hasPrefix .MethodName "Delete")}}
				{{if and .ResponseData (eq .ResponseData.GoType "Data")}}m.On("{{.MethodName}}", mock.Anything, mock.Anything).Return(nil, assert.AnError){{else}}m.On("{{.MethodName}}", mock.Anything, mock.Anything).Return(assert.AnError){{end}}
				{{else}}
				{{if and .ResponseData (eq .ResponseData.GoType "Data")}}{{if and .HasRequestBodyOrQuery .HasPathParams}}m.On("{{.MethodName}}", mock.Anything, mock.Anything, mock.Anything).Return(nil, assert.AnError){{else if .HasRequestBodyOrQuery}}m.On("{{.MethodName}}", mock.Anything, mock.Anything).Return(nil, assert.AnError){{else if .HasPathParams}}m.On("{{.MethodName}}", mock.Anything, mock.Anything).Return(nil, assert.AnError){{else}}m.On("{{.MethodName}}", mock.Anything).Return(nil, assert.AnError){{end}}
				{{else if and .ResponseData (eq .ResponseData.GoType "ListItem")}}{{if and .HasRequestBodyOrQuery .HasPathParams}}m.On("{{.MethodName}}", mock.Anything, mock.Anything, mock.Anything).Return([]param.{{$.Pascal}}ListItem{}, int64(0), assert.AnError){{else if .HasRequestBodyOrQuery}}m.On("{{.MethodName}}", mock.Anything, mock.Anything).Return([]param.{{$.Pascal}}ListItem{}, int64(0), assert.AnError){{else if .HasPathParams}}m.On("{{.MethodName}}", mock.Anything, mock.Anything).Return([]param.{{$.Pascal}}ListItem{}, int64(0), assert.AnError){{else}}m.On("{{.MethodName}}", mock.Anything).Return([]param.{{$.Pascal}}ListItem{}, int64(0), assert.AnError){{end}}
				{{else}}{{if and .HasRequestBodyOrQuery .HasPathParams}}m.On("{{.MethodName}}", mock.Anything, mock.Anything, mock.Anything).Return(assert.AnError){{else if .HasRequestBodyOrQuery}}m.On("{{.MethodName}}", mock.Anything, mock.Anything).Return(assert.AnError){{else if .HasPathParams}}m.On("{{.MethodName}}", mock.Anything, mock.Anything).Return(assert.AnError){{else}}m.On("{{.MethodName}}", mock.Anything).Return(assert.AnError){{end}}
				{{end}}
				{{end}}
			},
			setupRequest: func() (*http.Request, echo.Context) {
				e := echo.New()
				{{if .HasRequestBodyOrQuery}}
				reqBody := `{{if .RequestBody}}{"username":"testuser","email":"test@example.com"}{{else}}{"page":1,"size":10}{{end}}`
				req := httptest.NewRequest(http.Method{{if eq .Method "GET"}}Get{{else if eq .Method "POST"}}Post{{else if eq .Method "PUT"}}Put{{else if eq .Method "DELETE"}}Delete{{else if eq .Method "PATCH"}}Patch{{else}}{{.Method}}{{end}}, "/{{$.Camel}}", bytes.NewBufferString(reqBody))
				{{else}}
				req := httptest.NewRequest(http.Method{{if eq .Method "GET"}}Get{{else if eq .Method "POST"}}Post{{else if eq .Method "PUT"}}Put{{else if eq .Method "DELETE"}}Delete{{else if eq .Method "PATCH"}}Patch{{else}}{{.Method}}{{end}}, "/{{$.Camel}}", nil)
				{{end}}
				req.Header.Set(echo.HeaderContentType, echo.MIMEApplicationJSON)
				rec := httptest.NewRecorder()
				c := e.NewContext(req, rec)
				{{if .HasPathParams}}
				c.SetPath("/{{$.Camel}}/:id")
				c.SetParamNames("id")
				c.SetParamValues("1")
				{{end}}
				return req, c
			},
			expectedStatus: http.StatusInternalServerError,
			expectedError:  true,
			validateResponse: func(t *testing.T, status int, body string) {
				// 错误响应验证
			},
		},
		{{if .HasRequestBodyOrQuery}}
		{
			name: "无效请求体",
			setupMock: func(m *Mock{{$.Pascal}}UseCase) {
				// 无效请求不会调用biz层
			},
			setupRequest: func() (*http.Request, echo.Context) {
				e := echo.New()
				req := httptest.NewRequest(http.Method{{if eq .Method "GET"}}Get{{else if eq .Method "POST"}}Post{{else if eq .Method "PUT"}}Put{{else if eq .Method "DELETE"}}Delete{{else if eq .Method "PATCH"}}Patch{{else}}{{.Method}}{{end}}, "/{{$.Camel}}", bytes.NewBufferString("invalid json"))
				req.Header.Set(echo.HeaderContentType, echo.MIMEApplicationJSON)
				rec := httptest.NewRecorder()
				c := e.NewContext(req, rec)
				{{if .HasPathParams}}
				c.SetPath("/{{$.Camel}}/:id")
				c.SetParamNames("id")
				c.SetParamValues("1")
				{{end}}
				return req, c
			},
			expectedStatus: http.StatusBadRequest,
			expectedError:  true,
			validateResponse: func(t *testing.T, status int, body string) {
				assert.Equal(t, http.StatusBadRequest, status)
			},
		},
		{{end}}
		{{if .HasPathParams}}
		{
			name: "无效路径参数",
			setupMock: func(m *Mock{{$.Pascal}}UseCase) {
				// 无效参数不会调用biz层
			},
			setupRequest: func() (*http.Request, echo.Context) {
				e := echo.New()
				{{if .HasRequestBodyOrQuery}}
				reqBody := `{{if .RequestBody}}{"username":"testuser","email":"test@example.com"}{{else}}{"page":1,"size":10}{{end}}`
				req := httptest.NewRequest(http.Method{{if eq .Method "GET"}}Get{{else if eq .Method "POST"}}Post{{else if eq .Method "PUT"}}Put{{else if eq .Method "DELETE"}}Delete{{else if eq .Method "PATCH"}}Patch{{else}}{{.Method}}{{end}}, "/{{$.Camel}}", bytes.NewBufferString(reqBody))
				{{else}}
				req := httptest.NewRequest(http.Method{{if eq .Method "GET"}}Get{{else if eq .Method "POST"}}Post{{else if eq .Method "PUT"}}Put{{else if eq .Method "DELETE"}}Delete{{else if eq .Method "PATCH"}}Patch{{else}}{{.Method}}{{end}}, "/{{$.Camel}}", nil)
				{{end}}
				req.Header.Set(echo.HeaderContentType, echo.MIMEApplicationJSON)
				rec := httptest.NewRecorder()
				c := e.NewContext(req, rec)
				c.SetPath("/{{$.Camel}}/:id")
				c.SetParamNames("id")
				c.SetParamValues("invalid")
				return req, c
			},
			expectedStatus: http.StatusBadRequest,
			expectedError:  true,
			validateResponse: func(t *testing.T, status int, body string) {
				assert.Equal(t, http.StatusBadRequest, status)
			},
		},
		{{end}}
		{{if .HasRequestBodyOrQuery}}
		{
			name: "参数验证失败",
			setupMock: func(m *Mock{{$.Pascal}}UseCase) {
				// 验证失败不会调用biz层
			},
			setupRequest: func() (*http.Request, echo.Context) {
				e := echo.New()
				{{if .RequestBody}}
				// 测试必填字段缺失
				reqBody := `{}`
				{{else}}
				// 测试分页参数无效
				reqBody := `{"page":-1,"size":0}`
				{{end}}
				req := httptest.NewRequest(http.Method{{if eq .Method "GET"}}Get{{else if eq .Method "POST"}}Post{{else if eq .Method "PUT"}}Put{{else if eq .Method "DELETE"}}Delete{{else if eq .Method "PATCH"}}Patch{{else}}{{.Method}}{{end}}, "/{{$.Camel}}", bytes.NewBufferString(reqBody))
				req.Header.Set(echo.HeaderContentType, echo.MIMEApplicationJSON)
				rec := httptest.NewRecorder()
				c := e.NewContext(req, rec)
				{{if .HasPathParams}}
				c.SetPath("/{{$.Camel}}/:id")
				c.SetParamNames("id")
				c.SetParamValues("1")
				{{end}}
				return req, c
			},
			expectedStatus: http.StatusBadRequest,
			expectedError:  true,
			validateResponse: func(t *testing.T, status int, body string) {
				assert.Equal(t, http.StatusBadRequest, status)
			},
		},
		{{end}}
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			// 创建mock
			mockUseCase := new(Mock{{$.Pascal}}UseCase)
			tt.setupMock(mockUseCase)

			// 创建控制器
			controller := &{{$.Pascal}}Controller{
				{{$.Camel}}: mockUseCase,
			}

			// 设置请求
			_, c := tt.setupRequest()

			// 执行测试
			err := controller.{{.MethodName}}(c)

			// 验证结果
			if tt.expectedError {
				assert.Error(t, err)
			} else {
				assert.NoError(t, err)
			}

			// 验证响应
			if tt.validateResponse != nil {
				status := c.Response().Status
				body := ""
				// 注意：在Echo中，响应体需要通过其他方式获取
				// 这里简化处理，实际项目中可能需要更复杂的响应体获取逻辑
				tt.validateResponse(t, status, body)
			}

			// 验证mock调用
			mockUseCase.AssertExpectations(t)
		})
	}
}

{{if .HasRequestBodyOrQuery}}
func Test{{$.Pascal}}Controller_{{.MethodName}}_Validation(t *testing.T) {
	tests := []struct {
		name        string
		requestBody string
		expectError bool
		errorMsg    string
	}{
		{{if .RequestBody}}
		{
			name:        "有效请求体",
			requestBody: `{"username":"testuser","email":"test@example.com","age":25}`,
			expectError: false,
		},
		{
			name:        "缺少必填字段",
			requestBody: `{"username":"testuser"}`,
			expectError: true,
			errorMsg:    "缺少必填字段",
		},
		{
			name:        "无效邮箱格式",
			requestBody: `{"username":"testuser","email":"invalid-email","age":25}`,
			expectError: true,
			errorMsg:    "无效邮箱格式",
		},
		{
			name:        "用户名长度不足",
			requestBody: `{"username":"ab","email":"test@example.com","age":25}`,
			expectError: true,
			errorMsg:    "用户名长度不足",
		},
		{
			name:        "年龄超出范围",
			requestBody: `{"username":"testuser","email":"test@example.com","age":200}`,
			expectError: true,
			errorMsg:    "年龄超出范围",
		},
		{{else}}
		{
			name:        "有效分页参数",
			requestBody: `{"page":1,"size":10}`,
			expectError: false,
		},
		{
			name:        "无效页码",
			requestBody: `{"page":0,"size":10}`,
			expectError: true,
			errorMsg:    "页码必须大于0",
		},
		{
			name:        "页面大小超出限制",
			requestBody: `{"page":1,"size":101}`,
			expectError: true,
			errorMsg:    "页面大小超出限制",
		},
		{{end}}
		{
			name:        "无效JSON格式",
			requestBody: `invalid json`,
			expectError: true,
			errorMsg:    "无效JSON格式",
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			// 创建mock
			mockUseCase := new(Mock{{$.Pascal}}UseCase)
			{{if not .HasPathParams}}
			if !tt.expectError {
				{{if hasPrefix .MethodName "List"}}
				mockUseCase.On("{{.MethodName}}", mock.Anything, mock.Anything).Return([]param.{{$.Pascal}}ListItem{}, int64(0), nil)
				{{else}}
				mockUseCase.On("{{.MethodName}}", mock.Anything, mock.Anything).Return(nil)
				{{end}}
			}
			{{end}}

			// 创建控制器
			controller := &{{$.Pascal}}Controller{
				{{$.Camel}}: mockUseCase,
			}

			// 创建请求
			e := echo.New()
			req := httptest.NewRequest(http.Method{{if eq .Method "GET"}}Get{{else if eq .Method "POST"}}Post{{else if eq .Method "PUT"}}Put{{else if eq .Method "DELETE"}}Delete{{else if eq .Method "PATCH"}}Patch{{else}}{{.Method}}{{end}}, "/{{$.Camel}}", bytes.NewBufferString(tt.requestBody))
			req.Header.Set(echo.HeaderContentType, echo.MIMEApplicationJSON)
			rec := httptest.NewRecorder()
			c := e.NewContext(req, rec)
			{{if .HasPathParams}}
			c.SetPath("/{{$.Camel}}/:id")
			c.SetParamNames("id")
			c.SetParamValues("1")
			{{end}}

			// 执行测试
			err := controller.{{.MethodName}}(c)

			// 验证结果
			if tt.expectError {
				assert.Error(t, err)
				if tt.errorMsg != "" {
					assert.Contains(t, err.Error(), tt.errorMsg)
				}
			} else {
				assert.NoError(t, err)
			}

			// 验证mock调用
			mockUseCase.AssertExpectations(t)
		})
	}
}
{{end}}

{{if .HasPathParams}}
func Test{{$.Pascal}}Controller_{{.MethodName}}_PathParams(t *testing.T) {
	tests := []struct {
		name        string
		pathParam   string
		expectError bool
		errorMsg    string
	}{
		{
			name:        "有效ID",
			pathParam:   "123",
			expectError: false,
		},
		{
			name:        "零ID",
			pathParam:   "0",
			expectError: true,
			errorMsg:    "ID必须大于0",
		},
		{
			name:        "负数ID",
			pathParam:   "-1",
			expectError: true,
			errorMsg:    "ID必须大于0",
		},
		{
			name:        "非数字ID",
			pathParam:   "invalid",
			expectError: true,
			errorMsg:    "无效的ID格式",
		},
		{
			name:        "空ID",
			pathParam:   "",
			expectError: true,
			errorMsg:    "ID不能为空",
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			// 创建mock
			mockUseCase := new(Mock{{$.Pascal}}UseCase)
			if !tt.expectError {
				{{if or (eq .MethodName "GetByID") (hasPrefix .MethodName "Get")}}
				mockUseCase.On("{{.MethodName}}", mock.Anything, mock.Anything).Return(&param.{{$.Pascal}}Data{Id: 1}, nil)
				{{else if or (eq .MethodName "Delete") (hasPrefix .MethodName "Delete")}}
				{{if and .ResponseData (eq .ResponseData.GoType "Data")}}mockUseCase.On("{{.MethodName}}", mock.Anything, mock.Anything).Return(&param.{{$.Pascal}}Data{Id: 1}, nil){{else}}mockUseCase.On("{{.MethodName}}", mock.Anything, mock.Anything).Return(nil){{end}}
				{{else if or (eq .MethodName "Update") (hasPrefix .MethodName "Update")}}
				{{if and .ResponseData (eq .ResponseData.GoType "Data")}}mockUseCase.On("{{.MethodName}}", mock.Anything, mock.Anything, mock.Anything).Return(&param.{{$.Pascal}}Data{Id: 1}, nil){{else}}mockUseCase.On("{{.MethodName}}", mock.Anything, mock.Anything, mock.Anything).Return(nil){{end}}
				{{end}}
			}

			// 创建控制器
			controller := &{{$.Pascal}}Controller{
				{{$.Camel}}: mockUseCase,
			}

			// 创建请求
			e := echo.New()
			{{if .HasRequestBodyOrQuery}}
			reqBody := `{{if .RequestBody}}{"username":"testuser","email":"test@example.com"}{{else}}{"page":1,"size":10}{{end}}`
			req := httptest.NewRequest(http.Method{{if eq .Method "GET"}}Get{{else if eq .Method "POST"}}Post{{else if eq .Method "PUT"}}Put{{else if eq .Method "DELETE"}}Delete{{else if eq .Method "PATCH"}}Patch{{else}}{{.Method}}{{end}}, "/{{$.Camel}}", bytes.NewBufferString(reqBody))
			{{else}}
			req := httptest.NewRequest(http.Method{{if eq .Method "GET"}}Get{{else if eq .Method "POST"}}Post{{else if eq .Method "PUT"}}Put{{else if eq .Method "DELETE"}}Delete{{else if eq .Method "PATCH"}}Patch{{else}}{{.Method}}{{end}}, "/{{$.Camel}}", nil)
			{{end}}
			req.Header.Set(echo.HeaderContentType, echo.MIMEApplicationJSON)
			rec := httptest.NewRecorder()
			c := e.NewContext(req, rec)
			c.SetPath("/{{$.Camel}}/:id")
			c.SetParamNames("id")
			c.SetParamValues(tt.pathParam)

			// 执行测试
			err := controller.{{.MethodName}}(c)

			// 验证结果
			if tt.expectError {
				assert.Error(t, err)
				if tt.errorMsg != "" {
					assert.Contains(t, err.Error(), tt.errorMsg)
				}
			} else {
				assert.NoError(t, err)
			}

			// 验证mock调用
			mockUseCase.AssertExpectations(t)
		})
	}
}

// Test{{$.Pascal}}Controller_{{.MethodName}}_BoundaryValues 测试{{.Summary}}边界值
func Test{{$.Pascal}}Controller_{{.MethodName}}_BoundaryValues(t *testing.T) {
	{{if .HasRequestBodyOrQuery}}
	tests := []struct {
		name           string
		requestBody    string
		expectedStatus int
		description    string
	}{
		{{if hasPrefix .MethodName "List"}}
		{
			name:           "最小页码",
			requestBody:    `{"page":1,"size":1}`,
			expectedStatus: 200,
			description:    "测试最小页码值",
		},
		{
			name:           "最大页码",
			requestBody:    `{"page":1000,"size":10}`,
			expectedStatus: 200,
			description:    "测试大页码值",
		},
		{
			name:           "最小页面大小",
			requestBody:    `{"page":1,"size":1}`,
			expectedStatus: 200,
			description:    "测试最小页面大小",
		},
		{
			name:           "最大页面大小",
			requestBody:    `{"page":1,"size":100}`,
			expectedStatus: 200,
			description:    "测试最大页面大小",
		},
		{
			name:           "超出最大页面大小",
			requestBody:    `{"page":1,"size":101}`,
			expectedStatus: 400,
			description:    "测试超出最大页面大小限制",
		},
		{
			name:           "零页码",
			requestBody:    `{"page":0,"size":10}`,
			expectedStatus: 400,
			description:    "测试零页码验证",
		},
		{
			name:           "零页面大小",
			requestBody:    `{"page":1,"size":0}`,
			expectedStatus: 400,
			description:    "测试零页面大小验证",
		},
		{{else if or (eq .MethodName "Create") (hasPrefix .MethodName "Create")}}
		{
			name:           "最小用户名长度",
			requestBody:    `{"username":"ab","email":"test@example.com","age":18}`,
			expectedStatus: 400,
			description:    "测试用户名最小长度验证",
		},
		{
			name:           "最大用户名长度",
			requestBody:    `{"username":"abcdefghijklmnopqrst","email":"test@example.com","age":18}`,
			expectedStatus: 400,
			description:    "测试用户名最大长度验证",
		},
		{
			name:           "最小年龄",
			requestBody:    `{"username":"test","email":"test@example.com","age":0}`,
			expectedStatus: 200,
			description:    "测试最小年龄值",
		},
		{
			name:           "最大年龄",
			requestBody:    `{"username":"test","email":"test@example.com","age":150}`,
			expectedStatus: 200,
			description:    "测试最大年龄值",
		},
		{
			name:           "超出最大年龄",
			requestBody:    `{"username":"test","email":"test@example.com","age":151}`,
			expectedStatus: 400,
			description:    "测试超出最大年龄限制",
		},
		{
			name:           "负数年龄",
			requestBody:    `{"username":"test","email":"test@example.com","age":-1}`,
			expectedStatus: 400,
			description:    "测试负数年龄验证",
		},
		{
			name:           "无效邮箱格式",
			requestBody:    `{"username":"test","email":"invalid-email","age":18}`,
			expectedStatus: 400,
			description:    "测试无效邮箱格式验证",
		},
		{
			name:           "空邮箱",
			requestBody:    `{"username":"test","email":"","age":18}`,
			expectedStatus: 400,
			description:    "测试空邮箱验证",
		},
		{
			name:           "空用户名",
			requestBody:    `{"username":"","email":"test@example.com","age":18}`,
			expectedStatus: 400,
			description:    "测试空用户名验证",
		},
		{{else if or (eq .MethodName "Update") (hasPrefix .MethodName "Update")}}
		{
			name:           "最小用户名长度",
			requestBody:    `{"username":"ab","email":"test@example.com","age":18}`,
			expectedStatus: 400,
			description:    "测试用户名最小长度验证",
		},
		{
			name:           "最大用户名长度",
			requestBody:    `{"username":"abcdefghijklmnopqrst","email":"test@example.com","age":18}`,
			expectedStatus: 400,
			description:    "测试用户名最大长度验证",
		},
		{
			name:           "最小年龄",
			requestBody:    `{"username":"test","email":"test@example.com","age":0}`,
			expectedStatus: 200,
			description:    "测试最小年龄值",
		},
		{
			name:           "最大年龄",
			requestBody:    `{"username":"test","email":"test@example.com","age":150}`,
			expectedStatus: 200,
			description:    "测试最大年龄值",
		},
		{
			name:           "超出最大年龄",
			requestBody:    `{"username":"test","email":"test@example.com","age":151}`,
			expectedStatus: 400,
			description:    "测试超出最大年龄限制",
		},
		{
			name:           "无效邮箱格式",
			requestBody:    `{"username":"test","email":"invalid-email","age":18}`,
			expectedStatus: 400,
			description:    "测试无效邮箱格式验证",
		},
		{{end}}
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			// 创建mock
			mockUseCase := new(Mock{{$.Pascal}}UseCase)
			{{if hasPrefix .MethodName "List"}}
			mockUseCase.On("{{.MethodName}}", mock.Anything, mock.Anything).Return([]param.{{$.Pascal}}ListItem{}, int64(0), nil)
			{{else if or (eq .MethodName "Create") (hasPrefix .MethodName "Create")}}
			{{if and .ResponseData (eq .ResponseData.GoType "Data")}}mockUseCase.On("{{.MethodName}}", mock.Anything, mock.Anything).Return(&param.{{$.Pascal}}Data{Id: 1}, nil){{else}}mockUseCase.On("{{.MethodName}}", mock.Anything, mock.Anything).Return(nil){{end}}
			{{else if or (eq .MethodName "Update") (hasPrefix .MethodName "Update")}}
			{{if and .ResponseData (eq .ResponseData.GoType "Data")}}mockUseCase.On("{{.MethodName}}", mock.Anything, mock.Anything, mock.Anything).Return(&param.{{$.Pascal}}Data{Id: 1}, nil){{else}}mockUseCase.On("{{.MethodName}}", mock.Anything, mock.Anything, mock.Anything).Return(nil){{end}}
			{{else if or (eq .MethodName "GetByID") (hasPrefix .MethodName "Get")}}
			mockUseCase.On("{{.MethodName}}", mock.Anything, mock.Anything).Return(&param.{{$.Pascal}}Data{Id: 1}, nil)
			{{else if or (eq .MethodName "Delete") (hasPrefix .MethodName "Delete")}}
			mockUseCase.On("{{.MethodName}}", mock.Anything, mock.Anything).Return(nil)
			{{end}}

			// 创建控制器
			controller := &{{$.Pascal}}Controller{
				{{$.Camel}}: mockUseCase,
			}

			// 设置请求
			e := echo.New()
			{{if hasPrefix .MethodName "List"}}
			req := httptest.NewRequest(http.MethodGet, "/user", bytes.NewBufferString(tt.requestBody))
			{{else if or (eq .MethodName "Create") (hasPrefix .MethodName "Create")}}
			req := httptest.NewRequest(http.MethodPost, "/user", bytes.NewBufferString(tt.requestBody))
			{{else if or (eq .MethodName "Update") (hasPrefix .MethodName "Update")}}
			req := httptest.NewRequest(http.MethodPut, "/user/1", bytes.NewBufferString(tt.requestBody))
			{{else if or (eq .MethodName "GetByID") (hasPrefix .MethodName "Get")}}
			req := httptest.NewRequest(http.MethodGet, "/user/1", nil)
			{{else if or (eq .MethodName "Delete") (hasPrefix .MethodName "Delete")}}
			req := httptest.NewRequest(http.MethodDelete, "/user/1", nil)
			{{end}}
			rec := httptest.NewRecorder()
			c := e.NewContext(req, rec)

			// 执行测试
			{{if hasPrefix .MethodName "List"}}
			err := controller.ListUsers(c)
			{{else if or (eq .MethodName "Create") (hasPrefix .MethodName "Create")}}
			err := controller.Create(c)
			{{else if or (eq .MethodName "Update") (hasPrefix .MethodName "Update")}}
			err := controller.Update(c)
			{{else if or (eq .MethodName "GetByID") (hasPrefix .MethodName "Get")}}
			err := controller.GetByID(c)
			{{else if or (eq .MethodName "Delete") (hasPrefix .MethodName "Delete")}}
			err := controller.Delete(c)
			{{end}}

			// 验证结果
			if tt.expectedStatus >= 400 {
				assert.Error(t, err, tt.description)
			} else {
				assert.NoError(t, err, tt.description)
			}

			// 验证mock调用
			mockUseCase.AssertExpectations(t)
		})
	}
	{{else}}
	t.Skip("此操作无需请求体测试")
	{{end}}
}

// Test{{$.Pascal}}Controller_{{.MethodName}}_HTTPStatusCodes 测试{{.Summary}}HTTP状态码
func Test{{$.Pascal}}Controller_{{.MethodName}}_HTTPStatusCodes(t *testing.T) {
	tests := []struct {
		name           string
		setupMock      func(*Mock{{$.Pascal}}UseCase)
		expectedStatus int
		description    string
	}{
		{
			name: "成功状态码200",
			setupMock: func(m *Mock{{$.Pascal}}UseCase) {
				{{if hasPrefix .MethodName "List"}}
				m.On("{{.MethodName}}", mock.Anything, mock.Anything).Return([]param.{{$.Pascal}}ListItem{}, int64(0), nil)
				{{else if or (eq .MethodName "Create") (hasPrefix .MethodName "Create")}}
				{{if and .ResponseData (eq .ResponseData.GoType "Data")}}m.On("{{.MethodName}}", mock.Anything, mock.Anything).Return(&param.{{$.Pascal}}Data{Id: 1}, nil){{else}}m.On("{{.MethodName}}", mock.Anything, mock.Anything).Return(nil){{end}}
				{{else if or (eq .MethodName "Update") (hasPrefix .MethodName "Update")}}
				{{if and .ResponseData (eq .ResponseData.GoType "Data")}}m.On("{{.MethodName}}", mock.Anything, mock.Anything, mock.Anything).Return(&param.{{$.Pascal}}Data{Id: 1}, nil){{else}}m.On("{{.MethodName}}", mock.Anything, mock.Anything, mock.Anything).Return(nil){{end}}
				{{else if or (eq .MethodName "GetByID") (hasPrefix .MethodName "Get")}}
				m.On("{{.MethodName}}", mock.Anything, mock.Anything).Return(&param.{{$.Pascal}}Data{Id: 1}, nil)
				{{else if or (eq .MethodName "Delete") (hasPrefix .MethodName "Delete")}}
				m.On("{{.MethodName}}", mock.Anything, mock.Anything).Return(nil)
				{{end}}
			},
			expectedStatus: 200,
			description:    "测试成功响应状态码",
		},
		{
			name: "业务逻辑错误状态码500",
			setupMock: func(m *Mock{{$.Pascal}}UseCase) {
				{{if hasPrefix .MethodName "List"}}
				m.On("{{.MethodName}}", mock.Anything, mock.Anything).Return([]param.{{$.Pascal}}ListItem{}, int64(0), assert.AnError)
				{{else if or (eq .MethodName "Create") (hasPrefix .MethodName "Create")}}
				m.On("{{.MethodName}}", mock.Anything, mock.Anything).Return(nil, assert.AnError)
				{{else if or (eq .MethodName "Update") (hasPrefix .MethodName "Update")}}
				m.On("{{.MethodName}}", mock.Anything, mock.Anything, mock.Anything).Return(nil, assert.AnError)
				{{else if or (eq .MethodName "GetByID") (hasPrefix .MethodName "Get")}}
				m.On("{{.MethodName}}", mock.Anything, mock.Anything).Return(nil, assert.AnError)
				{{else if or (eq .MethodName "Delete") (hasPrefix .MethodName "Delete")}}
				m.On("{{.MethodName}}", mock.Anything, mock.Anything).Return(assert.AnError)
				{{end}}
			},
			expectedStatus: 500,
			description:    "测试业务逻辑错误状态码",
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			// 创建mock
			mockUseCase := new(Mock{{$.Pascal}}UseCase)
			tt.setupMock(mockUseCase)

			// 创建控制器
			controller := &{{$.Pascal}}Controller{
				{{$.Camel}}: mockUseCase,
			}

			// 设置请求
			e := echo.New()
			{{if hasPrefix .MethodName "List"}}
			req := httptest.NewRequest(http.MethodGet, "/user", nil)
			{{else if or (eq .MethodName "Create") (hasPrefix .MethodName "Create")}}
			req := httptest.NewRequest(http.MethodPost, "/user", bytes.NewBufferString(`{"username":"test","email":"test@example.com","age":18}`))
			{{else if or (eq .MethodName "Update") (hasPrefix .MethodName "Update")}}
			req := httptest.NewRequest(http.MethodPut, "/user/1", bytes.NewBufferString(`{"username":"test","email":"test@example.com","age":18}`))
			{{else if or (eq .MethodName "GetByID") (hasPrefix .MethodName "Get")}}
			req := httptest.NewRequest(http.MethodGet, "/user/1", nil)
			{{else if or (eq .MethodName "Delete") (hasPrefix .MethodName "Delete")}}
			req := httptest.NewRequest(http.MethodDelete, "/user/1", nil)
			{{end}}
			rec := httptest.NewRecorder()
			c := e.NewContext(req, rec)

			// 执行测试
			{{if hasPrefix .MethodName "List"}}
			err := controller.ListUsers(c)
			{{else if or (eq .MethodName "Create") (hasPrefix .MethodName "Create")}}
			err := controller.Create(c)
			{{else if or (eq .MethodName "Update") (hasPrefix .MethodName "Update")}}
			err := controller.Update(c)
			{{else if or (eq .MethodName "GetByID") (hasPrefix .MethodName "Get")}}
			err := controller.GetByID(c)
			{{else if or (eq .MethodName "Delete") (hasPrefix .MethodName "Delete")}}
			err := controller.Delete(c)
			{{end}}

			// 验证结果
			if tt.expectedStatus >= 400 {
				assert.Error(t, err, tt.description)
			} else {
				assert.NoError(t, err, tt.description)
			}

			// 验证mock调用
			mockUseCase.AssertExpectations(t)
		})
	}
}

// Test{{$.Pascal}}Controller_{{.MethodName}}_ResponseFormat 测试{{.Summary}}响应格式
func Test{{$.Pascal}}Controller_{{.MethodName}}_ResponseFormat(t *testing.T) {
	{{if or (eq .MethodName "Create") (hasPrefix .MethodName "Create") (eq .MethodName "Update") (hasPrefix .MethodName "Update") (eq .MethodName "GetByID") (hasPrefix .MethodName "Get") (hasPrefix .MethodName "List")}}
	t.Run("响应格式验证", func(t *testing.T) {
		// 创建mock
		mockUseCase := new(Mock{{$.Pascal}}UseCase)
		{{if hasPrefix .MethodName "List"}}
		mockUseCase.On("{{.MethodName}}", mock.Anything, mock.Anything).Return([]param.{{$.Pascal}}ListItem{
			{
				Id:        1,
				Username:  "test",
				Email:     "test@example.com",
				{{if $.HasTimeFields}}CreatedAt: time.Now(),
				UpdatedAt: time.Now(),{{end}}
				Age:       18,
			},
		}, int64(1), nil)
		{{else if or (eq .MethodName "Create") (hasPrefix .MethodName "Create")}}
		{{if and .ResponseData (eq .ResponseData.GoType "Data")}}mockUseCase.On("{{.MethodName}}", mock.Anything, mock.Anything).Return(&param.{{$.Pascal}}Data{
			Id:        1,
			Username:  "test",
			Email:     "test@example.com",
			{{if $.HasTimeFields}}CreatedAt: time.Now(),
			UpdatedAt: time.Now(),{{end}}
			Age:       18,
		}, nil){{else}}mockUseCase.On("{{.MethodName}}", mock.Anything, mock.Anything).Return(nil){{end}}
		{{else if or (eq .MethodName "Update") (hasPrefix .MethodName "Update")}}
		{{if and .ResponseData (eq .ResponseData.GoType "Data")}}mockUseCase.On("{{.MethodName}}", mock.Anything, mock.Anything, mock.Anything).Return(&param.{{$.Pascal}}Data{
			Id:        1,
			Username:  "test",
			Email:     "test@example.com",
			{{if $.HasTimeFields}}CreatedAt: time.Now(),
			UpdatedAt: time.Now(),{{end}}
			Age:       18,
		}, nil){{else}}mockUseCase.On("{{.MethodName}}", mock.Anything, mock.Anything, mock.Anything).Return(nil){{end}}
		{{else if or (eq .MethodName "GetByID") (hasPrefix .MethodName "Get")}}
		mockUseCase.On("{{.MethodName}}", mock.Anything, mock.Anything).Return(&param.{{$.Pascal}}Data{
			Id:        1,
			Username:  "test",
			Email:     "test@example.com",
			{{if $.HasTimeFields}}CreatedAt: time.Now(),
			UpdatedAt: time.Now(),{{end}}
			Age:       18,
		}, nil)
		{{end}}

		// 创建控制器
		controller := &{{$.Pascal}}Controller{
			{{$.Camel}}: mockUseCase,
		}

		// 设置请求
		e := echo.New()
		{{if hasPrefix .MethodName "List"}}
		req := httptest.NewRequest(http.MethodGet, "/user", nil)
		{{else if or (eq .MethodName "Create") (hasPrefix .MethodName "Create")}}
		req := httptest.NewRequest(http.MethodPost, "/user", bytes.NewBufferString(`{"username":"test","email":"test@example.com","age":18}`))
		{{else if or (eq .MethodName "Update") (hasPrefix .MethodName "Update")}}
		req := httptest.NewRequest(http.MethodPut, "/user/1", bytes.NewBufferString(`{"username":"test","email":"test@example.com","age":18}`))
		{{else if or (eq .MethodName "GetByID") (hasPrefix .MethodName "Get")}}
		req := httptest.NewRequest(http.MethodGet, "/user/1", nil)
		{{end}}
		req.Header.Set("Content-Type", "application/json")
		rec := httptest.NewRecorder()
		c := e.NewContext(req, rec)

		// 执行测试
		{{if hasPrefix .MethodName "List"}}
		err := controller.ListUsers(c)
		{{else if or (eq .MethodName "Create") (hasPrefix .MethodName "Create")}}
		err := controller.Create(c)
		{{else if or (eq .MethodName "Update") (hasPrefix .MethodName "Update")}}
		err := controller.Update(c)
		{{else if or (eq .MethodName "GetByID") (hasPrefix .MethodName "Get")}}
		err := controller.GetByID(c)
		{{end}}

		// 验证结果
		assert.NoError(t, err)

		// 验证响应格式
		var response resp.DataResponse
		err = json.Unmarshal(rec.Body.Bytes(), &response)
		assert.NoError(t, err)
		assert.Equal(t, 200, response.Code)
		assert.Equal(t, "success", response.Msg)

		// 验证mock调用
		mockUseCase.AssertExpectations(t)
	})
	{{else}}
	t.Skip("此操作无需响应格式测试")
	{{end}}
}

{{end}}

{{end}}
{{end}}
