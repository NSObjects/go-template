package biz

import (
"context"

"{{.PackagePath}}/internal/api/service/param"
"{{.PackagePath}}/internal/code"
)

// {{.Pascal}}Repository 定义数据访问接口，便于依赖注入
type {{.Pascal}}Repository interface {
List(ctx context.Context, p param.{{.Pascal}}Param) ([]param.{{.Pascal}}Response, int64, error)
Create(ctx context.Context, b param.{{.Pascal}}Body) error
Update(ctx context.Context, id int64, b param.{{.Pascal}}Body) error
Delete(ctx context.Context, id int64) error
Detail(ctx context.Context, id int64) (param.{{.Pascal}}Response, error)
}

// {{.Pascal}}UseCase {{.Pascal}}业务用例接口
type {{.Pascal}}UseCase interface {
List(ctx context.Context, p param.{{.Pascal}}Param) ([]param.{{.Pascal}}Response, int64, error)
Create(ctx context.Context, b param.{{.Pascal}}Body) error
Update(ctx context.Context, id int64, b param.{{.Pascal}}Body) error
Delete(ctx context.Context, id int64) error
Detail(ctx context.Context, id int64) (param.{{.Pascal}}Response, error)
}

// {{.Pascal}}Handler {{.Pascal}}业务处理器
type {{.Pascal}}Handler struct {
repo {{.Pascal}}Repository
}

// New{{.Pascal}}Handler 创建{{.Pascal}}业务处理器
func New{{.Pascal}}Handler(repo {{.Pascal}}Repository) {{.Pascal}}UseCase {
return &{{.Pascal}}Handler{repo: repo}
}

// List 获取{{.Pascal}}列表
func (h *{{.Pascal}}Handler) List(ctx context.Context, p param.{{.Pascal}}Param) ([]param.{{.Pascal}}Response, int64, error) {
list, total, err := h.repo.List(ctx, p)
if err != nil {
return nil, 0, code.WrapDatabaseError(err, "查询{{.Pascal}}列表失败")
}

return list, total, nil
}

// Create 创建{{.Pascal}}
func (h *{{.Pascal}}Handler) Create(ctx context.Context, b param.{{.Pascal}}Body) error {
if err := h.repo.Create(ctx, b); err != nil {
return code.WrapDatabaseError(err, "创建{{.Pascal}}失败")
}
return nil
}

// Update 更新{{.Pascal}}
func (h *{{.Pascal}}Handler) Update(ctx context.Context, id int64, b param.{{.Pascal}}Body) error {
if err := h.repo.Update(ctx, id, b); err != nil {
return code.WrapDatabaseError(err, "更新{{.Pascal}}失败")
}
return nil
}

// Delete 删除{{.Pascal}}
func (h *{{.Pascal}}Handler) Delete(ctx context.Context, id int64) error {
if err := h.repo.Delete(ctx, id); err != nil {
return code.WrapDatabaseError(err, "删除{{.Pascal}}失败")
}
return nil
}

// Detail 获取{{.Pascal}}详情
func (h *{{.Pascal}}Handler) Detail(ctx context.Context, id int64) (param.{{.Pascal}}Response, error) {
result, err := h.repo.Detail(ctx, id)
if err != nil {
return result, code.WrapDatabaseError(err, "查询{{.Pascal}}详情失败")
}
return result, nil
}
