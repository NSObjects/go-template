/*
 * Generated from OpenAPI3 document
 * Module: {{.Pascal}}
 */

package adapters

import (
	"context"
	"{{.PackagePath}}/internal/{{.Context}}/domain"
	"{{.PackagePath}}/internal/infra/persistence"
	"{{.PackagePath}}/internal/pkg/code"
)

// {{.Pascal}}RepositoryImpl 数据访问实现
type {{.Pascal}}RepositoryImpl struct {
	db *persistence.DataManager
}

// New{{.Pascal}}Repository 构造函数，供 fx 注入
func New{{.Pascal}}Repository(db *persistence.DataManager) domain.{{.Pascal}}Repository {
	return &{{.Pascal}}RepositoryImpl{db: db}
}

{{- range .Operations }}
// {{.MethodName}} {{if .Summary}}{{.Summary}}{{else}}处理{{$.Pascal}}{{end}}
func (r *{{$.Pascal}}RepositoryImpl) {{.MethodName}}(ctx context.Context{{- if .HasPathParams }}, id domain.{{$.Pascal}}ID{{- end }}{{- if .HasRequestBodyOrQuery }}, req interface{}{{- end }}) {{- if and .ResponseData (eq .ResponseData.GoType "ListItem")}}([]*domain.{{$.Pascal}}, int64, error){{- else if .ResponseData}}(*domain.{{$.Pascal}}, error){{- else}}error{{- end }} {
	// TODO: 实现数据访问逻辑。以下为占位返回，便于通过编译。
	{{- if and .ResponseData (eq .ResponseData.GoType "ListItem")}}
	var list []*domain.{{$.Pascal}}
	var total int64
	return list, total, nil
	{{- else if .ResponseData}}
	return nil, code.WrapDatabaseError(nil, "not implemented")
	{{- else}}
	return nil
	{{- end }}
}
{{- end }}


