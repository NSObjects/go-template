package utils

import (
    "context"
    "time"

    "github.com/labstack/echo/v4"
)

type TraceContext struct {
    TraceID   string
    SpanID    string
    RequestID string
    UserID    string
    StartTime time.Time
}

func ExtractTraceContext(c echo.Context) *TraceContext {
    tc := &TraceContext{
        StartTime: time.Now(),
    }

    if requestID := c.Request().Header.Get("X-Request-ID"); requestID != "" {
        tc.RequestID = requestID
    } else if requestID := c.Response().Header().Get("X-Request-ID"); requestID != "" {
        tc.RequestID = requestID
    }

    if traceID := c.Request().Header.Get("X-Trace-ID"); traceID != "" {
        tc.TraceID = traceID
    }

    if spanID := c.Request().Header.Get("X-Span-ID"); spanID != "" {
        tc.SpanID = spanID
    }

    if userID := c.Get("user_id"); userID != nil {
        if uid, ok := userID.(string); ok {
            tc.UserID = uid
        }
    }

    return tc
}

func BuildContext(c echo.Context) context.Context {
    ctx := c.Request().Context()
    tc := ExtractTraceContext(c)

    ctx = context.WithValue(ctx, "trace_id", tc.TraceID)
    ctx = context.WithValue(ctx, "span_id", tc.SpanID)
    ctx = context.WithValue(ctx, "request_id", tc.RequestID)
    ctx = context.WithValue(ctx, "user_id", tc.UserID)
    ctx = context.WithValue(ctx, "start_time", tc.StartTime)

    return ctx
}

func GetTraceID(ctx context.Context) string {
    if traceID, ok := ctx.Value("trace_id").(string); ok {
        return traceID
    }
    return ""
}

func GetRequestID(ctx context.Context) string {
    if requestID, ok := ctx.Value("request_id").(string); ok {
        return requestID
    }
    return ""
}

func GetUserID(ctx context.Context) string {
    if userID, ok := ctx.Value("user_id").(string); ok {
        return userID
    }
    return ""
}

func GetStartTime(ctx context.Context) time.Time {
    if startTime, ok := ctx.Value("start_time").(time.Time); ok {
        return startTime
    }
    return time.Now()
}

func WithTraceInfo(ctx context.Context, traceID, spanID, requestID, userID string) context.Context {
    ctx = context.WithValue(ctx, "trace_id", traceID)
    ctx = context.WithValue(ctx, "span_id", spanID)
    ctx = context.WithValue(ctx, "request_id", requestID)
    ctx = context.WithValue(ctx, "user_id", userID)
    ctx = context.WithValue(ctx, "start_time", time.Now())
    return ctx
}
