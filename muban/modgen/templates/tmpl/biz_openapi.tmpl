/*
 * Generated from OpenAPI3 document
 * Module: {{.Pascal}}
 */

package app

import (
	"context"
	"{{.PackagePath}}/internal/{{.Context}}/domain"
	"{{.PackagePath}}/internal/pkg/code"
)

// {{.Pascal}}Service 应用服务接口（入站端口）
type {{.Pascal}}Service interface {
{{- range .Operations }}
	// {{.MethodName}} {{if .Summary}}{{.Summary}}{{else}}处理{{$.Pascal}}{{end}}
	{{.MethodName}}(ctx context.Context{{- if .HasPathParams }}, id int64{{- end }}{{- if .HasRequestBodyOrQuery }}, req {{$.Pascal}}{{.MethodName}}Request{{- end }}) {{- if and .ResponseData (eq .ResponseData.GoType "ListItem")}}([]{{$.Pascal}}ListItem, int64, error){{- else if .ResponseData}}({{$.Pascal}}{{.ResponseData.GoType}}, error){{- else}}error{{- end }}
{{- end }}
}

// {{.Pascal}}ServiceImpl 应用服务实现
type {{.Pascal}}ServiceImpl struct {
	repo domain.{{.Pascal}}Repository
}

// New{{.Pascal}}Service 创建应用服务
func New{{.Pascal}}Service(repo domain.{{.Pascal}}Repository) {{.Pascal}}Service {
	return &{{.Pascal}}ServiceImpl{repo: repo}
}

{{- range .Operations }}
func (s *{{$.Pascal}}ServiceImpl) {{.MethodName}}(ctx context.Context{{- if .HasPathParams }}, id int64{{- end }}{{- if .HasRequestBodyOrQuery }}, req {{$.Pascal}}{{.MethodName}}Request{{- end }}) {{- if and .ResponseData (eq .ResponseData.GoType "ListItem")}}([]{{$.Pascal}}ListItem, int64, error){{- else if .ResponseData}}({{$.Pascal}}{{.ResponseData.GoType}}, error){{- else}}error{{- end }} {
{{- if and .ResponseData (eq .ResponseData.GoType "ListItem") }}
	list, total, err := s.repo.List(ctx, req.Offset(), req.Limit())
	if err != nil {
		return nil, 0, code.WrapDatabaseError(err, "list {{$.Lower}} failed")
	}
	// 需要转换为 DTO 列表（示例直接返回）
	return list, total, nil
{{- else if .ResponseData }}
	// 示例：按ID获取
	entity, err := s.repo.FindByID(ctx, domain.{{$.Pascal}}ID{})
	if err != nil {
		return {{$.Pascal}}{{.ResponseData.GoType}}{}, code.WrapDatabaseError(err, "get {{$.Lower}} failed")
	}
	// 需要转换为 DTO（示例略）
	var dto {{$.Pascal}}{{.ResponseData.GoType}}
	_ = entity
	return dto, nil
{{- else }}
	// 示例：删除
	if err := s.repo.Delete(ctx, domain.{{$.Pascal}}ID{}); err != nil {
		return code.WrapDatabaseError(err, "delete {{$.Lower}} failed")
	}
	return nil
{{- end }}
}

{{- end }}
