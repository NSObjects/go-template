/*
 * Generated from OpenAPI3 document
 * Module: {{.Pascal}}
 */

package biz

import (
"context"

"{{.PackagePath}}/internal/api/service/param"
"{{.PackagePath}}/internal/code"
)

// {{.Pascal}}Repository 数据访问接口 - 符合依赖注入原则
type {{.Pascal}}Repository interface {
{{- range .Operations }}
// {{.MethodName}} {{if .Summary}}{{.Summary}}{{else}}处理{{$.Pascal}}{{end}}
{{.MethodName}}(ctx context.Context{{- if .HasPathParams }}, id int64{{- end }}{{- if .HasRequestBodyOrQuery }}, req param.{{$.Pascal}}{{.MethodName}}Request{{- end }}) {{- if and .ResponseData (eq .ResponseData.GoType "ListItem")}}([]param.{{$.Pascal}}ListItem, int64, error){{- else if .ResponseData}}(param.{{$.Pascal}}{{.ResponseData.GoType}}, error){{- else}}error{{- end }}
{{- end }}
}

// {{.Pascal}}UseCase 业务逻辑接口
type {{.Pascal}}UseCase interface {
{{- range .Operations }}
// {{.MethodName}} {{if .Summary}}{{.Summary}}{{else}}处理{{$.Pascal}}{{end}}
{{.MethodName}}(ctx context.Context{{- if .HasPathParams }}, id int64{{- end }}{{- if .HasRequestBodyOrQuery }}, req param.{{$.Pascal}}{{.MethodName}}Request{{- end }}) {{- if and .ResponseData (eq .ResponseData.GoType "ListItem")}}([]param.{{$.Pascal}}ListItem, int64, error){{- else if .ResponseData}}(param.{{$.Pascal}}{{.ResponseData.GoType}}, error){{- else}}error{{- end }}
{{- end }}
}

// {{.Pascal}}Handler 业务逻辑处理器 - 通过依赖注入获取Repository
type {{.Pascal}}Handler struct {
repo {{.Pascal}}Repository
}

// New{{.Pascal}}Handler 创建业务逻辑处理器 - 符合依赖注入原则
func New{{.Pascal}}Handler(repo {{.Pascal}}Repository) {{.Pascal}}UseCase {
return &{{.Pascal}}Handler{
repo: repo,
}
}

{{- range .Operations }}
func (h *{{$.Pascal}}Handler) {{.MethodName}}(ctx context.Context{{- if .HasPathParams }}, id int64{{- end }}{{- if .HasRequestBodyOrQuery }}, req param.{{$.Pascal}}{{.MethodName}}Request{{- end }}) {{- if and .ResponseData (eq .ResponseData.GoType "ListItem")}}([]param.{{$.Pascal}}ListItem, int64, error){{- else if .ResponseData}}(param.{{$.Pascal}}{{.ResponseData.GoType}}, error){{- else}}error{{- end }} {
{{- if and .ResponseData (eq .ResponseData.GoType "ListItem") }}
list, total, err := h.repo.{{.MethodName}}(ctx{{- if and .HasPathParams .HasRequestBodyOrQuery}}, id, req{{- else if .HasPathParams }}, id{{- else if .HasRequestBodyOrQuery }}, req{{- end }})
if err != nil {
return nil, 0, code.WrapDatabaseError(err, "{{if .Summary}}{{.Summary}}{{else}}{{$.Pascal}}{{.MethodName}}{{end}}失败")
}
return list, total, nil
{{- else if .ResponseData }}
result, err := h.repo.{{.MethodName}}(ctx{{- if and .HasPathParams .HasRequestBodyOrQuery}}, id, req{{- else if .HasPathParams }}, id{{- else if .HasRequestBodyOrQuery }}, req{{- end }})
if err != nil {
return result, code.WrapDatabaseError(err, "{{if .Summary}}{{.Summary}}{{else}}{{$.Pascal}}{{.MethodName}}{{end}}失败")
}
return result, nil
{{- else }}
if err := h.repo.{{.MethodName}}(ctx{{- if and .HasPathParams .HasRequestBodyOrQuery}}, id, req{{- else if .HasPathParams }}, id{{- else if .HasRequestBodyOrQuery }}, req{{- end }}); err != nil {
return code.WrapDatabaseError(err, "{{if .Summary}}{{.Summary}}{{else}}{{$.Pascal}}{{.MethodName}}{{end}}失败")
}
return nil
{{- end }}
}

{{- end }}
