/*
 * Generated from OpenAPI3 document
 * Module: {{.Pascal}}
 */

package adapters

import (
{{- if .HasPathParams }}
	"strconv"
{{- end }}
	"{{.PackagePath}}/internal/{{.Context}}/app"
	"{{.PackagePath}}/internal/pkg/code"
	"{{.PackagePath}}/internal/shared/ports/resp"
	"{{.PackagePath}}/internal/pkg/utils"
	"github.com/labstack/echo/v4"
)

type {{.Pascal}}Handler struct {
	service app.{{.Pascal}}Service
}

func New{{.Pascal}}Handler(s app.{{.Pascal}}Service) RegisterRouter {
	return &{{.Pascal}}Handler{service: s}
}

// RegisterRouter 注册路由
func (h *{{.Pascal}}Handler) RegisterRouter(g *echo.Group, m ...echo.MiddlewareFunc) {
{{- range .Operations }}
	g.{{- if eq .Method "get" -}}GET{{- else if eq .Method "post" -}}POST{{- else if eq .Method "put" -}}PUT{{- else if eq .Method "delete" -}}DELETE{{- else -}}{{.Method | upper}}{{- end}}("{{.Path}}", h.{{.MethodName}}).Name = "{{.Summary}}"
{{- end }}
}

{{- range .Operations }}
func (h *{{$.Pascal}}Handler) {{.MethodName}}(ctx echo.Context) error {
{{- if .HasRequestBodyOrQuery }}
	// 绑定与验证
	var req app.{{$.Pascal}}{{.MethodName}}Request
	if err := ctx.Bind(&req); err != nil {
		return code.WrapBindError(err, "bind request failed")
	}
	if err := ctx.Validate(&req); err != nil {
		return code.WrapValidationError(err, "validation failed")
	}
{{- end }}
{{- if .HasPathParams }}
	// 路径参数
	idStr := ctx.Param("id")
	id, _ := strconv.ParseInt(idStr, 10, 64)
{{- end }}

	bizCtx := utils.BuildContext(ctx)
{{- if and .ResponseData (eq .ResponseData.GoType "ListItem") }}
	list, total, err := h.service.{{.MethodName}}(bizCtx{{- if and .HasPathParams .HasRequestBodyOrQuery}}, id, req{{- else if .HasPathParams }}, id{{- else if .HasRequestBodyOrQuery }}, req{{- end }})
	if err != nil {
		return err
	}
	return resp.ListDataResponse(ctx, list, total)
{{- else if .ResponseData }}
	result, err := h.service.{{.MethodName}}(bizCtx{{- if and .HasPathParams .HasRequestBodyOrQuery}}, id, req{{- else if .HasPathParams }}, id{{- else if .HasRequestBodyOrQuery }}, req{{- end }})
	if err != nil {
		return err
	}
	return resp.OneDataResponse(ctx, result)
{{- else }}
	if err := h.service.{{.MethodName}}(bizCtx{{- if and .HasPathParams .HasRequestBodyOrQuery}}, id, req{{- else if .HasPathParams }}, id{{- else if .HasRequestBodyOrQuery }}, req{{- end }}); err != nil {
		return err
	}
	return resp.OperateSuccess(ctx)
{{- end }}
}

{{- end }}
