package health

import (
	"context"
	"net/http"
	"time"
)

// Checker 健康检查器
type Checker struct {
	checks map[string]CheckFunc
}

// CheckFunc 健康检查函数类型
type CheckFunc func(ctx context.Context) error

// NewChecker 创建健康检查器
func NewChecker() *Checker {
	return &Checker{
		checks: make(map[string]CheckFunc),
	}
}

// AddCheck 添加健康检查
func (c *Checker) AddCheck(name string, check CheckFunc) {
	c.checks[name] = check
}

// Check 执行所有健康检查
func (c *Checker) Check(ctx context.Context) map[string]error {
	results := make(map[string]error)
	
	for name, check := range c.checks {
		ctx, cancel := context.WithTimeout(ctx, 5*time.Second)
		err := check(ctx)
		cancel()
		results[name] = err
	}
	
	return results
}

// HTTPHandler 健康检查HTTP处理器
func (c *Checker) HTTPHandler(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()
	results := c.Check(ctx)
	
	status := http.StatusOK
	for _, err := range results {
		if err != nil {
			status = http.StatusServiceUnavailable
			break
		}
	}
	
	w.WriteHeader(status)
}
