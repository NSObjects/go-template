package middleware

import (
	"context"
	"fmt"
	"time"
	"github.com/redis/go-redis/v9"
)

// RateLimiter 限流器
type RateLimiter struct {
	client *redis.Client
}

// NewRateLimiter 创建限流器
func NewRateLimiter(client *redis.Client) *RateLimiter {
	return &RateLimiter{
		client: client,
	}
}

// Allow 检查是否允许请求
func (r *RateLimiter) Allow(ctx context.Context, key string, limit int, window time.Duration) (bool, error) {
	pipe := r.client.Pipeline()

	// 使用滑动窗口算法
	now := time.Now()
	windowStart := now.Add(-window)

	// 删除过期的记录
	pipe.ZRemRangeByScore(ctx, key, "0", fmt.Sprintf("%d", windowStart.Unix()))

	// 添加当前请求
	pipe.ZAdd(ctx, key, redis.Z{
		Score:  float64(now.Unix()),
		Member: now.UnixNano(),
	})

	// 获取当前窗口内的请求数
	pipe.ZCard(ctx, key)

	// 设置过期时间
	pipe.Expire(ctx, key, window)

	results, err := pipe.Exec(ctx)
	if err != nil {
		return false, err
	}

	count := results[2].(*redis.IntCmd).Val()
	return count <= int64(limit), nil
}
