# {{.DisplayName}}

{{.DisplayName}} 是一个基于 Go 的 Web 服务模板，内置了 Echo、Fx、GORM 等常用组件，开箱即用地提供认证、日志、配置和可观测性支持，帮助团队在保持代码规范的同时快速启动新项目。

## ✨ 核心特性

- **分层架构**：遵循 Clean Architecture，清晰划分业务、数据和接口层
- **依赖注入**：集成 Uber Fx，支持模块化的服务装配
- **数据访问**：GORM + MySQL/PostgreSQL，内置 DAO、事务和迁移示例
- **认证与权限**：提供 JWT 登录流程，并预置 Casbin RBAC 模型
- **工程化工具链**：Makefile、代码生成器、lint/test 流水线一应俱全
- **可观测性**：内置健康检查、结构化日志和 Prometheus 指标上报

## 🚀 快速开始

### 环境要求

- Go 1.23+
- 可用的 MySQL 和 Redis 实例（如不使用可在配置中禁用）

### 初始化

```bash
# 安装依赖
go mod tidy

# 准备环境变量
cp env.example .env

# 启动开发模式
make dev
```

### 常用命令

| 命令 | 说明 |
| --- | --- |
| `make run` | 在本地运行服务 |
| `make test` | 执行单元测试 |
| `make lint` | 运行 golangci-lint 检查 |
| `make db-gen` | 根据当前数据库生成 GORM 代码 |
| `make gen-code` | 生成错误码和文档 |

## 🧰 项目脚手架命令

本项目自带 CLI，可将当前模板复制为全新的仓库：

```bash
go run ./muban -- new -m github.com/your-org/{{.PackageName}} -o ../{{.PackageName}}
```

可使用 `--name` 自定义展示名称，`-f/--force` 覆盖已有目录。

## 📁 目录结构

```
{{.ProjectName}}/
├── cmd/                # 程序入口与命令
├── configs/            # 配置文件与示例
├── internal/           # 业务代码
│   ├── api/            # API 层 (biz/data/service)
│   ├── code/           # 错误码定义
│   ├── log/            # 日志封装
│   └── server/         # Echo/Fx 组合及中间件
├── scripts/            # 开发脚本
├── sql/                # 数据库迁移
├── muban/              # 项目 CLI 与生成器
└── Makefile            # 常用任务
```

### API 分层说明

`internal/api` 目录同样划分为三层：

- **service 层**：定义路由与处理器，负责请求/响应模型转换、参数校验和错误映射，仅依赖 biz 层。
- **biz 层**：承载业务用例与领域逻辑，通过接口与 data 层交互，协调事务和跨模块协作。
- **data 层**：封装数据库、缓存与外部服务的访问细节，对 biz 层暴露仓储实现，并处理连接、重试与监控等通用能力。

## 📚 下一步

- 根据业务需求扩展 `internal/api` 下的模块
- 使用 `make gen-module` 快速创建标准化的 CRUD 模块
- 配置 CI/CD，将 `make lint` 与 `make test` 纳入流水线

## 📄 许可证

MIT License
