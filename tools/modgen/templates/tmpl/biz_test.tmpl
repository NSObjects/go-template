/*
 * Generated test cases
 * Module: {{.Pascal}}
 */

package biz

import (
	"context"
	"testing"

	"{{.PackagePath}}/internal/api/data"
	"{{.PackagePath}}/internal/api/service/param"
	"github.com/stretchr/testify/assert"
)

func Test{{.Pascal}}Handler_List(t *testing.T) {
	// 创建handler
	handler := &{{.Pascal}}Handler{
		dm: &data.DataManager{},
	}
	ctx := context.Background()
	req := param.{{.Pascal}}Param{
		Page:  1,
		Count: 10,
	}

	// 测试List方法
	result, total, err := handler.List(ctx, req)

	// 由于biz层实现只是返回默认值，这里只测试方法调用不panic
	// 注意：result为nil，total为0，err为nil，这是biz层的默认实现
	assert.Nil(t, result)
	assert.Equal(t, int64(0), total)
	assert.NoError(t, err)
}

func Test{{.Pascal}}Handler_Create(t *testing.T) {
	// 创建handler
	handler := &{{.Pascal}}Handler{
		dm: &data.DataManager{},
	}
	ctx := context.Background()
	req := param.{{.Pascal}}Body{
		// TODO: 填充测试数据
	}

	// 测试Create方法
	err := handler.Create(ctx, req)

	// 由于biz层实现只是返回默认值，这里只测试方法调用不panic
	assert.NoError(t, err)
}

func Test{{.Pascal}}Handler_Update(t *testing.T) {
	// 创建handler
	handler := &{{.Pascal}}Handler{
		dm: &data.DataManager{},
	}
	ctx := context.Background()
	req := param.{{.Pascal}}Body{
		// TODO: 填充测试数据
	}

	// 测试Update方法
	err := handler.Update(ctx, 1, req)

	// 由于biz层实现只是返回默认值，这里只测试方法调用不panic
	assert.NoError(t, err)
}

func Test{{.Pascal}}Handler_Delete(t *testing.T) {
	// 创建handler
	handler := &{{.Pascal}}Handler{
		dm: &data.DataManager{},
	}
	ctx := context.Background()

	// 测试Delete方法
	err := handler.Delete(ctx, 1)

	// 由于biz层实现只是返回默认值，这里只测试方法调用不panic
	assert.NoError(t, err)
}

func Test{{.Pascal}}Handler_Detail(t *testing.T) {
	// 创建handler
	handler := &{{.Pascal}}Handler{
		dm: &data.DataManager{},
	}
	ctx := context.Background()

	// 测试Detail方法
	result, err := handler.Detail(ctx, 1)

	// 由于biz层实现只是返回默认值，这里只测试方法调用不panic
	assert.Nil(t, result)
	assert.NoError(t, err)
}
