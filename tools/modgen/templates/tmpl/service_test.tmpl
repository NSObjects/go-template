/*
 * Generated test cases
 * Module: {{.Pascal}}
 */

package service

import (
	"bytes"
	"context"
	"encoding/json"
	"net/http"
	"net/http/httptest"
	"testing"

	"{{.PackagePath}}/internal/api/service/param"
	"{{.PackagePath}}/internal/resp"
	"{{.PackagePath}}/internal/utils"
	"github.com/labstack/echo/v4"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
)

// Mock{{.Pascal}}UseCase 模拟业务逻辑接口
type Mock{{.Pascal}}UseCase struct {
	mock.Mock
}

func (m *Mock{{.Pascal}}UseCase) List(ctx context.Context, req param.{{.Pascal}}Param) ([]param.{{.Pascal}}Response, int64, error) {
	args := m.Called(ctx, req)
	if args.Get(0) == nil {
		return nil, 0, args.Error(2)
	}
	return args.Get(0).([]param.{{.Pascal}}Response), args.Get(1).(int64), args.Error(2)
}

func (m *Mock{{.Pascal}}UseCase) Create(ctx context.Context, req param.{{.Pascal}}Body) error {
	args := m.Called(ctx, req)
	return args.Error(0)
}

func (m *Mock{{.Pascal}}UseCase) Update(ctx context.Context, id int64, req param.{{.Pascal}}Body) error {
	args := m.Called(ctx, id)
	return args.Error(0)
}

func (m *Mock{{.Pascal}}UseCase) Delete(ctx context.Context, id int64) error {
	args := m.Called(ctx, id)
	return args.Error(0)
}

func (m *Mock{{.Pascal}}UseCase) Detail(ctx context.Context, id int64) (*param.{{.Pascal}}Response, error) {
	args := m.Called(ctx, id)
	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*param.{{.Pascal}}Response), args.Error(1)
}

func Test{{.Pascal}}Controller_List(t *testing.T) {
	tests := []struct {
		name           string
		queryParams    string
		expectedStatus int
		expectedError  bool
		mockSetup      func(*Mock{{.Pascal}}UseCase)
	}{
		{
			name:           "成功获取列表",
			queryParams:    "?page=1&count=10",
			expectedStatus: http.StatusOK,
			expectedError:  false,
			mockSetup: func(m *Mock{{.Pascal}}UseCase) {
				m.On("List", mock.Anything, mock.MatchedBy(func(req param.{{.Pascal}}Param) bool {
					return req.Page == 1 && req.Count == 10
				})).Return([]param.{{.Pascal}}Response{}, int64(0), nil)
			},
		},
		{
			name:           "业务逻辑错误",
			queryParams:    "?page=0",
			expectedStatus: http.StatusInternalServerError,
			expectedError:  true,
			mockSetup: func(m *Mock{{.Pascal}}UseCase) {
				m.On("List", mock.Anything, mock.MatchedBy(func(req param.{{.Pascal}}Param) bool {
					return req.Page == 0
				})).Return([]param.{{.Pascal}}Response{}, int64(0), assert.AnError)
			},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			// 创建Echo实例
			e := echo.New()
			req := httptest.NewRequest(http.MethodGet, "/{{.Route}}"+tt.queryParams, nil)
			rec := httptest.NewRecorder()
			c := e.NewContext(req, rec)

			// 创建mock
			mockUseCase := new(Mock{{.Pascal}}UseCase)
			tt.mockSetup(mockUseCase)

			// 创建控制器并注入mock依赖
			controller := &{{.Camel}}Controller{
				{{.Camel}}: mockUseCase,
			}

			// 执行测试
			err := controller.list(c)

			// 验证结果
			if tt.expectedError {
				assert.Error(t, err)
			} else {
				assert.NoError(t, err)
				assert.Equal(t, tt.expectedStatus, rec.Code)

				// 验证响应格式是否符合resp包的标准格式
				var response resp.DataResponse
				err = json.Unmarshal(rec.Body.Bytes(), &response)
				assert.NoError(t, err)
				assert.NotNil(t, response.Data)
			}
			
			// 验证mock调用
			mockUseCase.AssertExpectations(t)
		})
	}
}

func Test{{.Pascal}}Controller_Create(t *testing.T) {
	tests := []struct {
		name           string
		requestBody    string
		expectedStatus int
		expectedError  bool
		mockSetup      func(*Mock{{.Pascal}}UseCase)
	}{
		{
			name:           "成功创建",
			requestBody:    `{"name":"test"}`,
			expectedStatus: http.StatusOK,
			expectedError:  false,
			mockSetup: func(m *Mock{{.Pascal}}UseCase) {
				m.On("Create", mock.Anything, mock.MatchedBy(func(req param.{{.Pascal}}Body) bool {
					return req.Name == "test"
				})).Return(nil)
			},
		},
		{
			name:           "无效请求体",
			requestBody:    `invalid json`,
			expectedStatus: http.StatusBadRequest,
			expectedError:  true,
			mockSetup: func(m *Mock{{.Pascal}}UseCase) {
				// 无效请求不会调用biz层，所以不需要设置mock期望
			},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			// 创建Echo实例
			e := echo.New()
			req := httptest.NewRequest(http.MethodPost, "/{{.Route}}", bytes.NewBufferString(tt.requestBody))
			req.Header.Set(echo.HeaderContentType, echo.MIMEApplicationJSON)
			rec := httptest.NewRecorder()
			c := e.NewContext(req, rec)

			// 创建mock
			mockUseCase := new(Mock{{.Pascal}}UseCase)
			tt.mockSetup(mockUseCase)

			// 创建控制器并注入mock依赖
			controller := &{{.Camel}}Controller{
				{{.Camel}}: mockUseCase,
			}

			// 执行测试
			err := controller.create(c)

			// 验证结果
			if tt.expectedError {
				assert.Error(t, err)
			} else {
				assert.NoError(t, err)
				assert.Equal(t, tt.expectedStatus, rec.Code)
			}
			
			// 验证mock调用
			mockUseCase.AssertExpectations(t)
		})
	}
}

func Test{{.Pascal}}Controller_Update(t *testing.T) {
	tests := []struct {
		name           string
		id             string
		requestBody    string
		expectedStatus int
		expectedError  bool
		mockSetup      func(*Mock{{.Pascal}}UseCase)
	}{
		{
			name:           "成功更新",
			id:             "1",
			requestBody:    `{"name":"updated test"}`,
			expectedStatus: http.StatusOK,
			expectedError:  false,
			mockSetup: func(m *Mock{{.Pascal}}UseCase) {
				m.On("Update", mock.Anything, int64(1), mock.MatchedBy(func(req param.{{.Pascal}}Body) bool {
					return req.Name == "updated test"
				})).Return(nil)
			},
		},
		{
			name:           "无效ID",
			id:             "invalid",
			requestBody:    `{"name":"test"}`,
			expectedStatus: http.StatusBadRequest,
			expectedError:  true,
			mockSetup: func(m *Mock{{.Pascal}}UseCase) {
				// 无效请求不会调用biz层，所以不需要设置mock期望
			},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			// 创建Echo实例
			e := echo.New()
			req := httptest.NewRequest(http.MethodPut, "/{{.Route}}/"+tt.id, bytes.NewBufferString(tt.requestBody))
			req.Header.Set(echo.HeaderContentType, echo.MIMEApplicationJSON)
			rec := httptest.NewRecorder()
			c := e.NewContext(req, rec)
			c.SetPath("/{{.Route}}/:id")
			c.SetParamNames("id")
			c.SetParamValues(tt.id)

			// 创建mock
			mockUseCase := new(Mock{{.Pascal}}UseCase)
			tt.mockSetup(mockUseCase)

			// 创建控制器并注入mock依赖
			controller := &{{.Camel}}Controller{
				{{.Camel}}: mockUseCase,
			}

			// 执行测试
			err := controller.update(c)

			// 验证结果
			if tt.expectedError {
				assert.Error(t, err)
			} else {
				assert.NoError(t, err)
				assert.Equal(t, tt.expectedStatus, rec.Code)
			}
			
			// 验证mock调用
			mockUseCase.AssertExpectations(t)
		})
	}
}

func Test{{.Pascal}}Controller_Delete(t *testing.T) {
	tests := []struct {
		name           string
		id             string
		expectedStatus int
		expectedError  bool
		mockSetup      func(*Mock{{.Pascal}}UseCase)
	}{
		{
			name:           "成功删除",
			id:             "1",
			expectedStatus: http.StatusOK,
			expectedError:  false,
			mockSetup: func(m *Mock{{.Pascal}}UseCase) {
				m.On("Delete", mock.Anything, int64(1)).Return(nil)
			},
		},
		{
			name:           "业务逻辑错误",
			id:             "0",
			expectedStatus: http.StatusInternalServerError,
			expectedError:  true,
			mockSetup: func(m *Mock{{.Pascal}}UseCase) {
				m.On("Delete", mock.Anything, int64(0)).Return(assert.AnError)
			},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			// 创建Echo实例
			e := echo.New()
			req := httptest.NewRequest(http.MethodDelete, "/{{.Route}}/"+tt.id, nil)
			rec := httptest.NewRecorder()
			c := e.NewContext(req, rec)
			c.SetPath("/{{.Route}}/:id")
			c.SetParamNames("id")
			c.SetParamValues(tt.id)

			// 创建mock
			mockUseCase := new(Mock{{.Pascal}}UseCase)
			tt.mockSetup(mockUseCase)

			// 创建控制器并注入mock依赖
			controller := &{{.Camel}}Controller{
				{{.Camel}}: mockUseCase,
			}

			// 执行测试
			err := controller.remove(c)

			// 验证结果
			if tt.expectedError {
				assert.Error(t, err)
			} else {
				assert.NoError(t, err)
				assert.Equal(t, tt.expectedStatus, rec.Code)
			}
			
			// 验证mock调用
			mockUseCase.AssertExpectations(t)
		})
	}
}

func Test{{.Pascal}}Controller_Detail(t *testing.T) {
	tests := []struct {
		name           string
		id             string
		expectedStatus int
		expectedError  bool
		mockSetup      func(*Mock{{.Pascal}}UseCase)
	}{
		{
			name:           "成功获取详情",
			id:             "1",
			expectedStatus: http.StatusOK,
			expectedError:  false,
			mockSetup: func(m *Mock{{.Pascal}}UseCase) {
				m.On("Detail", mock.Anything, int64(1)).Return(&param.{{.Pascal}}Response{ID: 1, Name: "test"}, nil)
			},
		},
		{
			name:           "业务逻辑错误",
			id:             "0",
			expectedStatus: http.StatusInternalServerError,
			expectedError:  true,
			mockSetup: func(m *Mock{{.Pascal}}UseCase) {
				// 无效ID可能不会调用biz层，或者会调用但返回错误
				m.On("Detail", mock.Anything, int64(0)).Return(nil, assert.AnError)
			},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			// 创建Echo实例
			e := echo.New()
			req := httptest.NewRequest(http.MethodGet, "/{{.Route}}/"+tt.id, nil)
			rec := httptest.NewRecorder()
			c := e.NewContext(req, rec)
			c.SetPath("/{{.Route}}/:id")
			c.SetParamNames("id")
			c.SetParamValues(tt.id)

			// 创建mock
			mockUseCase := new(Mock{{.Pascal}}UseCase)
			tt.mockSetup(mockUseCase)

			// 创建控制器并注入mock依赖
			controller := &{{.Camel}}Controller{
				{{.Camel}}: mockUseCase,
			}

			// 执行测试
			err := controller.detail(c)

			// 验证结果
			if tt.expectedError {
				assert.Error(t, err)
			} else {
				assert.NoError(t, err)
				assert.Equal(t, tt.expectedStatus, rec.Code)

				// 验证响应格式是否符合resp包的标准格式
				var response resp.DataResponse
				err = json.Unmarshal(rec.Body.Bytes(), &response)
				assert.NoError(t, err)
				assert.NotNil(t, response.Data)
			}
			
			// 验证mock调用
			mockUseCase.AssertExpectations(t)
		})
	}
}
