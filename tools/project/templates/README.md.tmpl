# {{.ProjectName}}

{{.ProjectName}} 是一个基于 Go 的 Web 应用项目，使用 Echo 框架构建。

## 功能特性

- 🚀 基于 Echo 框架的高性能 HTTP 服务器
- 🔧 使用 Fx 进行依赖注入
- 📊 集成 GORM 进行数据库操作
- 🔐 支持 JWT 认证和 Casbin 权限控制
- 📝 结构化日志记录
- ⚙️ 灵活的配置管理
- 🐳 Docker 支持
- 📈 监控和健康检查

## 技术栈

- **Web 框架**: Echo v4
- **依赖注入**: Fx
- **数据库**: GORM + MySQL/PostgreSQL
- **缓存**: Redis
- **消息队列**: Kafka
- **认证**: JWT
- **权限控制**: Casbin
- **配置管理**: Viper
- **日志**: slog
- **监控**: Prometheus

## 快速开始

### 1. 安装依赖

```bash
go mod tidy
```

### 2. 配置环境

复制环境变量文件并修改配置：

```bash
cp env.example .env
```

### 3. 运行项目

```bash
# 开发模式
make dev

# 生产模式
make build
make run
```

## 项目结构

```
.
├── cmd/                    # 命令行工具
├── configs/                # 配置文件
├── internal/               # 内部包
│   ├── api/               # API 层
│   │   ├── biz/           # 业务逻辑
│   │   ├── data/          # 数据访问
│   │   └── service/       # 服务层
│   ├── cache/             # 缓存
│   ├── code/              # 错误码
│   ├── configs/           # 配置管理
│   ├── health/            # 健康检查
│   ├── log/               # 日志
│   ├── middleware/        # 中间件
│   ├── resp/              # 响应处理
│   ├── server/            # 服务器
│   ├── utils/             # 工具函数
│   └── validator/         # 验证器
├── k8s/                   # Kubernetes 配置
├── scripts/               # 脚本
└── sql/                   # SQL 文件
```

## 开发指南

### 添加新的 API

1. 在 `internal/api/biz/` 中定义业务逻辑
2. 在 `internal/api/service/` 中实现服务层
3. 在 `internal/api/data/` 中实现数据访问层
4. 在 `internal/server/` 中注册路由

### 添加新的中间件

1. 在 `internal/middleware/` 中实现中间件
2. 在 `internal/server/middlewares/` 中注册中间件

## 部署

### Docker 部署

```bash
# 构建镜像
docker build -t {{.ProjectName}} .

# 运行容器
docker run -p 8080:8080 {{.ProjectName}}
```

### Kubernetes 部署

```bash
kubectl apply -f k8s/
```

## 许可证

MIT License